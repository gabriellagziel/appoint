name: CI

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

jobs:
  # -----------------------
  # Unit & Widget Tests
  # -----------------------
  unit-widget:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter pub
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Run unit & widget tests
        run: flutter test --coverage --coverage-path=coverage/unit.lcov

      - name: Upload unit coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage/unit.lcov
          flags: unit

  # -----------------------
  # Integration Tests
  # -----------------------
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-widget
    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter pub
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only auth,firestore,storage &
          sleep 10  # wait for emulators to spin up

      - name: Run integration tests
        run: flutter test integration_test --coverage --coverage-path=coverage/integ.lcov

      - name: Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage/integ.lcov
          flags: integration

  # -----------------------
  # End-to-End Device Tests
  # -----------------------
  e2e-device:
    name: End-to-End Device Tests
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter pub
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only auth,firestore,storage &
          sleep 10

      - name: Run end-to-end tests on device
        run: flutter drive --driver integration_test/driver.dart --target integration_test/app_test.dart

  # -----------------------
  # Golden Tests
  # -----------------------
  golden:
    name: Golden Tests
    runs-on: ubuntu-latest
    needs: unit-widget
    steps:
      - uses: actions/checkout@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Run golden tests
        run: flutter test test/golden

  # -----------------------
  # Performance Benchmarks
  # -----------------------
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter pub
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Run startup & jank benchmarks
        run: |
          flutter drive \
            --profile \
            --trace-startup \
            --timeline-streams=Engine,Flutter,Embedder \
            --driver integration_test/driver.dart \
            --target integration_test/performance_test.dart

  # -----------------------
  # Localization & i18n Checks
  # -----------------------
  localization:
    name: Localization & i18n Checks
    runs-on: ubuntu-latest
    needs: unit-widget
    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter pub
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Run i18n validation
        run: |
          flutter pub get
          flutter pub run intl_utils:generate --verify

      - name: Audit translation keys
        run: |
          chmod +x scripts/audit_languages.sh
          ./scripts/audit_languages.sh

  # -----------------------
  # Security & Dependency Audit
  # -----------------------
  security-audit:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    needs: unit-widget
    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter pub
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Check Dart dependencies
        run: flutter pub outdated --mode=null-safety

      - name: Audit Node dependencies
        run: |
          cd functions
          npm install
          npm audit

  # -----------------------
  # Accessibility Checks
  # -----------------------
  accessibility:
    name: Accessibility Checks
    runs-on: ubuntu-latest
    needs: unit-widget
    steps:
      - uses: actions/checkout@v3

      - name: Cache Flutter pub
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2

      - name: Install dependencies
        run: flutter pub get

      - name: Run accessibility checks
        run: |
          # Check for semantic labels in widgets
          echo "üîç Checking for semantic labels..."
          if ! grep -r "Semantics(" lib/ --include="*.dart" | head -5; then
            echo "‚ö†Ô∏è  No semantic labels found in widgets"
          else
            echo "‚úÖ Semantic labels found in widgets"
          fi
          
          # Check for accessibility properties
          echo "üîç Checking for accessibility properties..."
          if ! grep -r "semanticLabel\|labelText\|hintText" lib/ --include="*.dart" | head -5; then
            echo "‚ö†Ô∏è  No accessibility properties found"
          else
            echo "‚úÖ Accessibility properties found"
          fi
          
          # Check for proper contrast ratios (basic check)
          echo "üîç Checking for proper color usage..."
          if ! grep -r "colorScheme\|Theme.of" lib/ --include="*.dart" | head -5; then
            echo "‚ö†Ô∏è  No theme-based colors found"
          else
            echo "‚úÖ Theme-based colors found"
          fi

  # -----------------------
  # Merge & Report Coverage
  # -----------------------
  coverage-report:
    name: Merge & Report Coverage
    runs-on: ubuntu-latest
    needs:
      - unit-widget
      - integration
      - e2e-device
      - golden
      - performance-benchmarks
      - localization
      - security-audit
      - accessibility
    steps:
      - uses: actions/checkout@v3

      - name: Install coverage tool
        run: dart pub global activate coverage

      - name: Merge lcov files
        run: |
          dart pub global run coverage:merge coverage/unit.lcov coverage/integ.lcov \
            --out coverage/lcov.info

      - name: Upload merged coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage/lcov.info 