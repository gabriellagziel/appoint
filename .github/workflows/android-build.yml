name: Android Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
          - profile
      deploy_to_play_store:
        description: 'Deploy to Play Store'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.24.5'
  JAVA_VERSION: '17'

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Generate code
        run: |
          echo "🔧 Running code generation..."
          dart run build_runner build --delete-conflicting-outputs || echo "⚠️ Code generation completed with warnings"
        continue-on-error: true
        
      - name: Build APK
        run: |
          echo "🤖 Building Android APK..."
          flutter build apk --${{ github.event.inputs.build_type || 'release' }} --target-platform android-arm64
          flutter build apk --${{ github.event.inputs.build_type || 'release' }} --target-platform android-arm
          flutter build apk --${{ github.event.inputs.build_type || 'release' }} --target-platform android-x64
          echo "✅ Android APK build completed"
          
      - name: Build App Bundle
        run: |
          echo "📦 Building Android App Bundle..."
          flutter build appbundle --${{ github.event.inputs.build_type || 'release' }}
          echo "✅ Android App Bundle build completed"
          
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            build/app/outputs/flutter-apk/app-arm64-release.apk
            build/app/outputs/flutter-apk/app-arm-release.apk
            build/app/outputs/flutter-apk/app-x64-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  sign-and-release:
    needs: build-android
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
          
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-builds
          path: build/app/outputs/
          
      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
          cat > android/app/key.properties << EOF
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=keystore.jks
          EOF
          
      - name: Sign APK
        run: |
          echo "🔐 Signing APK..."
          jarsigner -keystore android/app/keystore.jks \
            -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            -keypass "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            build/app/outputs/flutter-apk/app-arm64-release.apk \
            "${{ secrets.ANDROID_KEY_ALIAS }}"
          echo "✅ APK signed"
          
      - name: Sign App Bundle
        run: |
          echo "🔐 Signing App Bundle..."
          jarsigner -keystore android/app/keystore.jks \
            -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            -keypass "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            build/app/outputs/bundle/release/app-release.aab \
            "${{ secrets.ANDROID_KEY_ALIAS }}"
          echo "✅ App Bundle signed"
          
      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-signed-builds
          path: |
            build/app/outputs/flutter-apk/app-arm64-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  deploy-play-store:
    needs: sign-and-release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.inputs.deploy_to_play_store == 'true'
    timeout-minutes: 15
    steps:
      - name: Download signed artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-signed-builds
          path: build/app/outputs/
          
      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_JSON_KEY }}
          packageName: com.appoint.app
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
          
      - name: Notify Play Store deployment
        run: |
          echo "✅ Successfully deployed to Play Store"
          echo "📱 Build is now available for internal testing"

  deploy-play-store-production:
    needs: sign-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 15
    steps:
      - name: Download signed artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-signed-builds
          path: build/app/outputs/
          
      - name: Deploy to Play Store Production
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_JSON_KEY }}
          packageName: com.appoint.app
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: production
          
      - name: Notify Play Store production deployment
        run: |
          echo "✅ Successfully deployed to Play Store Production"
          echo "📱 App is now live on Google Play Store"