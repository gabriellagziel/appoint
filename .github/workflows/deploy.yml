name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  FLUTTER_VERSION: '3.24.5'
  NODE_VERSION: '18'

jobs:
  deploy-firebase:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          flutter pub get
          npm install
          
      - name: Generate code
        run: |
          echo "üîß Running code generation..."
          dart run build_runner build --delete-conflicting-outputs || echo "‚ö†Ô∏è Code generation completed with warnings"
        continue-on-error: true
        
      - name: Build web app
        run: |
          echo "üåê Building Flutter web app..."
          flutter build web --release --web-renderer html || echo "‚ö†Ô∏è Web build completed with warnings"
          echo "‚úÖ Web build completed"
        continue-on-error: true
          
      - name: Verify web build
        run: |
          echo "üîç Verifying web build..."
          if [ -f "build/web/index.html" ]; then
            echo "‚úÖ Web build verification passed"
          else
            echo "‚ùå Build verification failed: index.html not found"
            exit 1
          fi
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [ -n "$FIREBASE_TOKEN" ]; then
            echo "üöÄ Deploying to Firebase Hosting..."
            for i in {1..3}; do
              if firebase deploy --only hosting --token "$FIREBASE_TOKEN"; then
                echo "‚úÖ Firebase deployment completed successfully"
                break
              else
                echo "‚ùå Firebase deployment attempt $i failed"
                if [ $i -eq 3 ]; then
                  echo "‚ùå All Firebase deployment attempts failed"
                  exit 1
                fi
                echo "üîÑ Retrying in 10 seconds..."
                sleep 10
              fi
            done
          else
            echo "‚ùå Firebase token not available"
            exit 1
          fi

  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-builds
          path: android-builds/
          
      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web-build/
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            
            - üöÄ New features and improvements
            - üêõ Bug fixes and optimizations
            - üì± Mobile app updates
            - üåê Web app enhancements
            
            ## Downloads
            
            - Android APK: Available in release assets
            - Android App Bundle: Available in release assets
            - iOS Build: Available in release assets
            - Web Build: Available in release assets
          draft: false
          prerelease: false

  notify:
    needs: [deploy-firebase, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Deployment completed successfully"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed"
          
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Deployment Status: ${{ job.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}