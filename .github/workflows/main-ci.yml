name: Web CI/CD Pipeline

on:
  push:
    branches: [feature/web-only, develop, main]
  pull_request:
    branches: [develop, main]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [marketing, business, enterprise-onboarding-portal, admin, dashboard]
    name: Lint & Test ${{ matrix.app }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies for ${{ matrix.app }}
        working-directory: ${{ matrix.app }}
        run: npm ci
      - name: Lint ${{ matrix.app }}
        working-directory: ${{ matrix.app }}
        run: npm run lint
        continue-on-error: true
      - name: Test ${{ matrix.app }}
        working-directory: ${{ matrix.app }}
        run: npm test
        continue-on-error: true

  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [marketing, business, enterprise-onboarding-portal, admin, dashboard]
    name: Build ${{ matrix.app }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies for ${{ matrix.app }}
        working-directory: ${{ matrix.app }}
        run: npm ci
      - name: Build ${{ matrix.app }}
        working-directory: ${{ matrix.app }}
        run: npm run build

  build-functions:
    needs: lint-and-test
    runs-on: ubuntu-latest
    name: Build Functions
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Functions Dependencies
        run: |
          cd functions
          npm ci
      - name: Build Functions
        run: |
          cd functions
          npm run build
      - name: Lint Functions
        run: |
          cd functions
          npm run lint
        continue-on-error: true

  deploy-functions:
    needs: [build, build-functions]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Deploy Functions
        run: firebase deploy --only functions --token "${{ secrets.FIREBASE_TOKEN }}"

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - run: doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --wait

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [build, build-functions, deploy-functions]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - run: doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --wait
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  smoke-test:
    needs: [deploy-functions, deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests against production..."
          # Test main domain
          curl -f https://app-oint.com || exit 1
          # Test API domain
          curl -f https://api.app-oint.com/api/status || exit 1
          # Test business dashboard
          curl -f https://business.app-oint.com || exit 1
          echo "Smoke tests passed!"

  security-scan:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run Security Scan
        run: |
          echo "Running security scan..."
          # Add actual security scanning tools here
          npm audit --audit-level=moderate || true
          echo "Security scan completed"

  notify:
    needs: [build, build-functions, deploy-functions, deploy-production, smoke-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Notify on Success
        if: success()
        run: |
          echo "‚úÖ All CI/CD steps completed successfully!"
          echo "üöÄ App deployed to: https://app-oint.com"
          echo "üîß Functions deployed to: https://us-central1-app-oint-core.cloudfunctions.net"
          echo "üìä Dashboard: https://dashboard.app-oint.com"
          echo "üè¢ Business: https://business.app-oint.com"
      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå CI/CD pipeline failed!"
          echo "Please check the logs for details." 