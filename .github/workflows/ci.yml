name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          cache: true
      - run: flutter pub get
      - name: Analyze
        run: flutter analyze --no-fatal-infos
      - name: Run localization validation
        run: dart run tool/arb_validator.dart
      - name: Generate localization dashboard
        run: dart run tool/localization_dashboard.dart
      - name: Run accessibility audit
        run: ./scripts/accessibility_audit.sh
      - name: Run translation audit
        run: ./scripts/audit_languages.sh
      - name: Upload localization report
        uses: actions/upload-artifact@v3
        with:
          name: localization-report
          path: docs/TRANSLATION_STATUS.md
          retention-days: 30

  security-rules:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          cache: true
      - run: flutter pub get
      - name: Run security rules tests
        run: flutter test test/security_rules_test.dart
      - name: Test Firestore rules
        run: |
          # Install Firebase CLI if not available
          if ! command -v firebase &> /dev/null; then
            npm install -g firebase-tools
          fi
          
          # Test Firestore rules
          firebase emulators:exec "flutter test test/security_rules_test.dart" --only firestore

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          cache: true
      - run: flutter pub get
      - name: Run tests with coverage
        run: |
          tries=3
          for i in $(seq 1 $tries); do
            flutter test --coverage --no-pub && break
            if [ $i -eq $tries ]; then
              exit 1
            fi
            echo "Retrying tests ($i/$tries)..."
            sleep 5
          done
      - name: Install lcov
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install lcov
          else
            sudo apt-get install lcov
          fi
      - name: Generate coverage report
        run: genhtml coverage/lcov.info -o coverage/html
      - name: Check coverage threshold
        run: |
          COVERAGE=$(lcov --summary coverage/lcov.info | grep lines | awk '{print $2}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage ($COVERAGE%) below threshold (80%)"
            exit 1
          else
            echo "✅ Coverage ($COVERAGE%) meets threshold (80%)"
          fi
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.os }}
          path: |
            coverage/lcov.info
            coverage/html/
          retention-days: 30
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: [lint, test, visual-qa]
    steps:
      - uses: actions/checkout@v4
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          cache: true
      - run: flutter pub get
      - name: Build APK
        run: flutter build apk --release
      - name: Build iOS IPA
        run: |
          flutter build ios --release --no-codesign
          cd ios
          xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/Runner.xcarchive archive
          xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportPath build/ios -exportOptionsPlist exportOptions.plist
        continue-on-error: true
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7
      - name: Upload iOS IPA
        uses: actions/upload-artifact@v3
        with:
          name: app-release.ipa
          path: ios/build/ios/Runner.ipa
          retention-days: 7
        continue-on-error: true

  visual-qa:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          cache: true
      - run: flutter pub get
      - name: Run Visual QA Tests
        run: |
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Run comprehensive visual QA
          ./scripts/run_visual_qa.sh
      - name: Upload Visual QA Reports
        uses: actions/upload-artifact@v3
        with:
          name: visual-qa-reports
          path: |
            docs/visual_qa_summary.md
            docs/rtl_tests/
            docs/dark_mode_tests/
            docs/screen_size_tests/
            docs/landscape_tests/
          retention-days: 30

  smoke-test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
      
      - name: Download APK
        uses: actions/download-artifact@v3
        with:
          name: app-apk
          path: build/app/outputs/flutter-apk/
      
      - name: Setup Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: |
            adb shell input keyevent 82
            adb shell input keyevent 82
            adb shell input keyevent 82
      
      - name: Install APK
        run: |
          adb install -r build/app/outputs/flutter-apk/app-release.apk
      
      - name: Run smoke tests
        run: |
          # Wait for app to be ready
          sleep 10
          
          # Launch app
          adb shell am start -n com.example.appoint/.MainActivity
          sleep 5
          
          # Basic smoke test - check if app launches without crash
          adb shell dumpsys activity activities | grep -q "com.example.appoint" || exit 1
          
          # Test basic navigation (if app has login screen)
          # adb shell input tap 500 800  # Example tap coordinates
          # sleep 2
          
          echo "✅ Smoke test passed - app launched successfully"
      
      - name: Capture screenshots on failure
        if: failure()
        run: |
          adb shell screencap /sdcard/screenshot.png
          adb pull /sdcard/screenshot.png screenshot.png
          echo "Screenshot captured on failure"
        continue-on-error: true
      
      - name: Upload failure screenshot
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: failure-screenshot
          path: screenshot.png
        continue-on-error: true
