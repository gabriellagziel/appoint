name: CI & QA Pipeline

on:
  push:
  pull_request:

env:
  FLUTTER_VERSION: '3.32.0'
  DART_VERSION: '3.4.0'
  NODE_VERSION: '18'
  FIREBASE_EMULATOR_VERSION: '13.0.0'

jobs:
  # Global cache setup job - creates cache keys for all dependencies
  setup-cache:
    runs-on: ubuntu-latest
    outputs:
      dart-pub-key: ${{ steps.cache-dart.outputs.cache-hit }}
      flutter-key: ${{ steps.cache-flutter.outputs.cache-hit }}
      npm-key: ${{ steps.cache-npm.outputs.cache-hit }}
      firebase-key: ${{ steps.cache-firebase.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Dart pub dependencies
      - name: Cache Dart Pub
        id: cache-dart
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-dart-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-dart-pub-

      # Cache Flutter SDK and build artifacts
      - name: Cache Flutter
        id: cache-flutter
        uses: actions/cache@v4
        with:
          path: |
            ~/.flutter
            .dart_tool
            build
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      # Cache NPM dependencies for Firebase Functions
      - name: Cache NPM
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('functions/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Cache Firebase Emulator Suite
      - name: Cache Firebase Emulators
        id: cache-firebase
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/firebase/emulators
            ~/.config/firebase
          key: firebase-emulator-${{ env.FIREBASE_EMULATOR_VERSION }}-${{ hashFiles('**/firebase.json') }}
          restore-keys: |
            firebase-emulator-${{ env.FIREBASE_EMULATOR_VERSION }}-
            firebase-emulator-

  # Linting and static analysis
  lint:
    needs: setup-cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore caches from setup-cache job
      - name: Restore Dart Pub Cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ needs.setup-cache.outputs.dart-pub-key }}

      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Offline-first dependency fetching
      - name: Get Dart dependencies (offline-first)
        run: dart pub get --offline || dart pub get

      - name: Get Flutter dependencies (offline-first)
        run: flutter pub get --offline || flutter pub get

      # Verify SDK versions
      - name: Verify versions
        run: |
          echo "=== Dart Version ==="
          dart --version
          echo "=== Flutter Version ==="
          flutter --version

      # Run linting and analysis
      - name: Run Flutter analyze
        run: flutter analyze --no-fatal-infos

      - name: Run localization audit
        run: ./scripts/audit_languages.sh
        continue-on-error: true

      - name: Run accessibility audit
        run: ./scripts/accessibility_audit.sh
        continue-on-error: true

  # Unit and widget tests with coverage
  unit-widget-tests:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore caches
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Offline-first dependency fetching
      - name: Get dependencies (offline-first)
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Run tests with retry logic
      - name: Run unit and widget tests
        run: |
          tries=3
          for i in $(seq 1 $tries); do
            flutter test --coverage --no-pub && break
            if [ $i -eq $tries ]; then
              echo "❌ Tests failed after $tries attempts"
              exit 1
            fi
            echo "Retrying tests ($i/$tries)..."
            sleep 5
          done

      # Install coverage tools
      - name: Install lcov
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install lcov
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install lcov
          else
            sudo apt-get update && sudo apt-get install -y lcov
          fi

      # Generate coverage report
      - name: Generate coverage report
        run: genhtml coverage/lcov.info -o coverage/html

      # Check coverage threshold
      - name: Check coverage threshold
        run: |
          COVERAGE=$(lcov --summary coverage/lcov.info | grep lines | awk '{print $2}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage ($COVERAGE%) below threshold (80%)"
            exit 1
          else
            echo "✅ Coverage ($COVERAGE%) meets threshold (80%)"
          fi

      # Upload coverage artifacts
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: |
            coverage/lcov.info
            coverage/html/
          retention-days: 30

      # Upload to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Additional static analysis
  static-analysis:
    needs: unit-widget-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore caches
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Offline-first dependency fetching
      - name: Get dependencies (offline-first)
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Run additional static analysis
      - name: Run Flutter analyze (strict)
        run: flutter analyze

      - name: Run localization validation
        run: dart run tool/arb_validator.dart
        continue-on-error: true

      - name: Generate localization dashboard
        run: dart run tool/localization_dashboard.dart
        continue-on-error: true

      # Upload static analysis reports
      - name: Upload static analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            docs/TRANSLATION_STATUS.md
          retention-days: 30

  # Integration tests with Firebase emulators
  integration-tests:
    needs: static-analysis
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:6
        ports: ['6379:6379']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js for Firebase CLI
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_EMULATOR_VERSION }}

      # Restore Firebase emulator cache
      - name: Restore Firebase Emulators
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/firebase/emulators
            ~/.config/firebase
          key: ${{ needs.setup-cache.outputs.firebase-key }}

      # Pre-download Firebase emulators
      - name: Pre-download Firebase emulators
        run: |
          firebase setup:emulators:firestore --only firestore,auth,storage
          firebase emulators:start --only firestore,auth,storage &
          sleep 30
          pkill -f firebase || true

      # Restore Flutter cache
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Offline-first dependency fetching
      - name: Get dependencies (offline-first)
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Verify versions
      - name: Verify versions
        run: |
          echo "=== Dart Version ==="
          dart --version
          echo "=== Flutter Version ==="
          flutter --version
          echo "=== Node Version ==="
          node --version
          echo "=== Firebase CLI Version ==="
          firebase --version

      # Run integration tests with emulators
      - name: Run integration tests with Firebase emulators
        run: |
          firebase emulators:exec "
            flutter drive --target=test_driver/app.dart
          " --only firestore,auth,storage --import=./emulator-data --export-on-exit=./emulator-data

      # Upload integration test artifacts
      - name: Upload integration test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-artifacts
          path: |
            emulator-data/
            coverage/
          retention-days: 30

  # Firebase Functions tests
  functions-test:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_EMULATOR_VERSION }}

      # Restore Firebase emulator cache
      - name: Restore Firebase Emulators
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/firebase/emulators
            ~/.config/firebase
          key: ${{ needs.setup-cache.outputs.firebase-key }}

      # Restore NPM cache
      - name: Restore NPM Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.setup-cache.outputs.npm-key }}

      # Install Functions dependencies (offline-first)
      - name: Install Functions dependencies
        run: |
          cd functions
          npm ci --prefer-offline || npm ci

      # Run Functions tests
      - name: Run Functions tests
        run: |
          cd functions
          npm test

      # Run Functions tests with emulators
      - name: Run Functions tests with emulators
        run: |
          firebase emulators:exec "
            cd functions && npm test
          " --only functions --import=./emulator-data --export-on-exit=./emulator-data

  # Build applications
  build:
    needs: functions-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore Flutter cache
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Offline-first dependency fetching
      - name: Get dependencies (offline-first)
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Build APK
      - name: Build APK
        run: flutter build apk --release

      # Build iOS (macOS only)
      - name: Build iOS
        if: runner.os == 'macOS'
        run: flutter build ios --no-codesign

      # Build Web
      - name: Build Web
        run: flutter build web --release

      # Upload build artifacts
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-${{ matrix.os }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

      - name: Upload iOS build
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ matrix.os }}
          path: build/ios/
          retention-days: 7

      - name: Upload Web build
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ matrix.os }}
          path: build/web/
          retention-days: 7

  # Security rules validation
  security-rules:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js for Firebase CLI
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_EMULATOR_VERSION }}

      # Restore Firebase emulator cache
      - name: Restore Firebase Emulators
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/firebase/emulators
            ~/.config/firebase
          key: ${{ needs.setup-cache.outputs.firebase-key }}

      # Restore Flutter cache
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Offline-first dependency fetching
      - name: Get dependencies (offline-first)
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Run security rules tests
      - name: Run security rules tests
        run: flutter test test/security_rules_test.dart
        continue-on-error: true

      # Validate Firestore rules (dry-run)
      - name: Validate Firestore rules
        run: |
          firebase emulators:exec "
            firebase deploy --only firestore:rules --dry-run
          " --only firestore --import=./emulator-data --export-on-exit=./emulator-data

  # Visual QA tests
  visual-qa:
    needs: security-rules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore Flutter cache
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Offline-first dependency fetching
      - name: Get dependencies (offline-first)
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Run visual QA tests
      - name: Run Visual QA Tests
        run: |
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Run comprehensive visual QA
          ./scripts/run_visual_qa.sh

      # Upload visual QA reports
      - name: Upload Visual QA Reports
        uses: actions/upload-artifact@v4
        with:
          name: visual-qa-reports
          path: |
            docs/visual_qa_summary.md
            docs/rtl_tests/
            docs/dark_mode_tests/
            docs/screen_size_tests/
            docs/landscape_tests/
          retention-days: 30

  # Localization QA
  localization-qa:
    needs: visual-qa
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Python for localization tools
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Run localization audit
      - name: Run Localization Audit
        run: python3 tool/check_translation_status.py
        continue-on-error: true

      # Upload localization reports
      - name: Upload Localization Reports
        uses: actions/upload-artifact@v4
        with:
          name: localization-reports
          path: |
            docs/TRANSLATION_STATUS.md
          retention-days: 30

  # Final smoke test
  smoke-test:
    needs: localization-qa
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js for Firebase CLI
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_EMULATOR_VERSION }}

      # Restore Firebase emulator cache
      - name: Restore Firebase Emulators
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/firebase/emulators
            ~/.config/firebase
          key: ${{ needs.setup-cache.outputs.firebase-key }}

      # Restore Flutter cache
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Offline-first dependency fetching
      - name: Get dependencies (offline-first)
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Run smoke tests with emulators
      - name: Run Smoke Tests
        run: |
          firebase emulators:exec "
            flutter test test/smoke_test.dart
          " --only firestore,auth,storage --import=./emulator-data --export-on-exit=./emulator-data

      # Upload smoke test artifacts
      - name: Upload Smoke Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-artifacts
          path: |
            emulator-data/
          retention-days: 7
