# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# This file contains valid GitHub Actions context access patterns
# The IDE may show false positive warnings for context access
name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  FLUTTER_VERSION: '3.32.0'
  DART_VERSION: '3.4.0'
  NODE_VERSION: '18'

jobs:
  version-bump:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Semantic version bump
        id: bump
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual release with specified version and type
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            if [ "$RELEASE_TYPE" = "patch" ]; then
              flutter pub version patch
            elif [ "$RELEASE_TYPE" = "minor" ]; then
              flutter pub version minor
            elif [ "$RELEASE_TYPE" = "major" ]; then
              flutter pub version major
            else
              flutter pub version patch
            fi
            NEW_VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          else
            # Automatic release based on tag
            NEW_VERSION="${GITHUB_REF#refs/tags/v}"
            flutter pub version $NEW_VERSION
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "Bump version to $NEW_VERSION" || echo "No changes to commit"
          git tag v$NEW_VERSION
          git push origin HEAD
          git push origin v$NEW_VERSION

  test-all-platforms:
    needs: version-bump
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Run integration tests
        run: flutter test integration_test/

  build-android:
    needs: version-bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> android/key.properties
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties

      - name: Build APK
        run: |
          flutter build apk --release --target-platform android-arm64
          flutter build apk --release --target-platform android-arm
          flutter build apk --release --target-platform android-x64

      - name: Build App Bundle
        run: flutter build appbundle --release

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            build/app/outputs/flutter-apk/app-arm64-release.apk
            build/app/outputs/flutter-apk/app-arm-release.apk
            build/app/outputs/flutter-apk/app-x64-release.apk
          retention-days: 30

      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-appbundle
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  build-ios:
    needs: version-bump
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Setup iOS signing
        run: |
          # Create keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Import certificate
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 -d > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          
          # Import provisioning profile
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 -d > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release -destination generic/platform=iOS -archivePath build/ios/Runner.xcarchive archive
          xcodebuild -exportArchive -archivePath build/ios/Runner.xcarchive -exportPath build/ios -exportOptionsPlist ios/ExportOptions.plist

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios/
          retention-days: 30

  build-web:
    needs: version-bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Build Web
        run: flutter build web --release

      - name: Upload Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web
          retention-days: 30

  security-scan:
    needs: version-bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd functions
          npm ci

      - name: Run security audit
        run: |
          cd functions
          npm audit --audit-level moderate

      - name: Run Flutter security check
        run: |
          flutter pub deps --style=tree
          flutter pub outdated

      - name: Run dependency vulnerability scan
        run: |
          npm audit --audit-level moderate

  create-release:
    needs: [version-bump, build-android, build-ios, build-web, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## What's Changed
            
            ### üöÄ New Features
            - Add new features here
            
            ### üêõ Bug Fixes
            - Fix bugs here
            
            ### üì± Mobile Apps
            - Android APK and App Bundle included
            - iOS IPA included
            
            ### üåê Web App
            - Web build included
            
            ### üîí Security
            - Security scan passed
            - No vulnerabilities detected
            
            ## Downloads
            - [Android APK](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/app-arm64-release.apk)
            - [Android App Bundle](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/app-release.aab)
            - [iOS IPA](https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/appoint.ipa)
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: artifacts/android-apks/app-arm64-release.apk
          asset_name: app-arm64-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload App Bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: artifacts/android-appbundle/app-release.aab
          asset_name: app-release.aab
          asset_content_type: application/vnd.android.package-archive

  deploy-android:
    needs: [create-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Download App Bundle
        uses: actions/download-artifact@v4
        with:
          name: android-appbundle
          path: .

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_JSON_KEY }}
          packageName: com.appoint.app
          releaseFiles: app-release.aab
          track: production
          status: completed

  deploy-ios:
    needs: [create-release]
    runs-on: macos-latest
    if: github.event_name == 'push'
    steps:
      - name: Download iOS build
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: .

      - name: Deploy to App Store
        uses: apple-actions/upload-testflight@v1
        with:
          app-path: appoint.ipa
          api-key: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}

  deploy-web:
    needs: [create-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [ -n "$FIREBASE_TOKEN" ]; then
            firebase deploy --only hosting --token "$FIREBASE_TOKEN"
          else
            echo "Firebase token not available, skipping deployment"
          fi

  notify:
    needs: [create-release, deploy-android, deploy-ios, deploy-web]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          text: |
            Release ${{ github.ref }} has been deployed!
            - Android: Play Store
            - iOS: App Store
            - Web: Firebase Hosting
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 