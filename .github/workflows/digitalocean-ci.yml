name: DigitalOcean CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      platform:
        description: 'Target platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - web
          - android
          - ios
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      force_github_fallback:
        description: 'Force GitHub fallback (override lock)'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.32.5'
  DART_VERSION: '3.5.4'
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  DIGITALOCEAN_CI_LOCK: 'true'  # Lock to prevent GitHub fallback

jobs:
  # Validate DigitalOcean CI lock
  validate-ci-lock:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Check CI Lock Status
        run: |
          echo "üîí Checking DigitalOcean CI lock status..."
          
          if [ "${{ github.event.inputs.force_github_fallback }}" = "true" ]; then
            echo "‚ö†Ô∏è WARNING: GitHub fallback override enabled"
            echo "‚ö†Ô∏è This bypasses the DigitalOcean CI lock"
            echo "‚ö†Ô∏è Tests will run on GitHub (not recommended)"
          else
            echo "‚úÖ DigitalOcean CI lock is active"
            echo "‚úÖ All Flutter operations will use DigitalOcean container"
            echo "‚úÖ GitHub Actions will only handle orchestration"
          fi
          
          # Validate required secrets
          if [ -z "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" ]; then
            echo "‚ùå DIGITALOCEAN_ACCESS_TOKEN not configured"
            echo "‚ùå DigitalOcean CI cannot proceed"
            exit 1
          else
            echo "‚úÖ DIGITALOCEAN_ACCESS_TOKEN is configured"
          fi

  # Setup dependencies using DigitalOcean container
  setup-dependencies:
    needs: validate-ci-lock
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
          
      - name: Cache Flutter dependencies (persistent)
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-
            
      - name: Cache build artifacts (persistent)
        uses: actions/cache@v4
        with:
          path: |
            build/
            .dart_tool/
            ios/Pods/
            android/.gradle/
          key: build-artifacts-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-${{ github.sha }}
          restore-keys: |
            build-artifacts-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            build-artifacts-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            
      - name: Install Flutter dependencies
        run: |
          echo "üì¶ Installing Flutter dependencies..."
          flutter pub get
          flutter pub deps --style=tree
          
      - name: Install Node.js dependencies
        run: |
          echo "üì¶ Installing Node.js dependencies..."
          npm install
          
      - name: Verify Flutter setup
        run: |
          echo "üîç Verifying Flutter setup..."
          flutter doctor -v
          flutter --version
          dart --version

  # Code generation with build_runner (DigitalOcean only)
  generate-code:
    needs: setup-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
        
      - name: Restore Flutter cache
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-
            
      - name: Install dependencies
        run: flutter pub get
        
      - name: Generate code with build_runner
        run: |
          echo "üîß Running code generation on DigitalOcean..."
          echo "üìù Generating .g.dart and .freezed.dart files..."
          
          # Clean any existing generated files
          find . -name "*.g.dart" -delete
          find . -name "*.freezed.dart" -delete
          
          # Run build_runner with multiple attempts
          for attempt in {1..3}; do
            echo "üîÑ Attempt $attempt: Running build_runner..."
            if dart run build_runner build --delete-conflicting-outputs; then
              echo "‚úÖ Code generation completed successfully"
              break
            else
              echo "‚ö†Ô∏è Attempt $attempt failed"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå All build_runner attempts failed"
                exit 1
              fi
              echo "üîÑ Retrying in 5 seconds..."
              sleep 5
            fi
          done
          
      - name: Verify generated files
        run: |
          echo "üîç Verifying generated files..."
          generated_files=$(find . -name "*.g.dart" -o -name "*.freezed.dart" | wc -l)
          echo "üìä Found $generated_files generated files"
          
          if [ $generated_files -gt 0 ]; then
            echo "‚úÖ Code generation verification passed"
          else
            echo "‚ö†Ô∏è No generated files found - this might be normal if no models need generation"
          fi
          
      - name: Upload generated files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-files
          path: |
            lib/**/*.g.dart
            lib/**/*.freezed.dart
          retention-days: 30

  # Code analysis and linting (DigitalOcean only)
  analyze:
    needs: generate-code
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
        
      - name: Restore Flutter cache
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-
            
      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          name: generated-files
          path: lib/
          
      - name: Install dependencies
        run: |
          flutter pub get
          npm install
          
      - name: Analyze code
        run: |
          echo "üîç Running Flutter analyze on DigitalOcean..."
          flutter analyze --no-fatal-infos
        continue-on-error: true
        
      - name: Run spell check
        run: npm run spell-check
        continue-on-error: true
        
      - name: Check code formatting
        run: dart format --set-exit-if-changed .
        continue-on-error: true
        
      - name: Verify pubspec.yaml
        run: flutter pub deps --style=tree

  # Unit and widget tests (DigitalOcean only)
  test:
    needs: generate-code
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ !github.event.inputs.skip_tests }}
    strategy:
      matrix:
        test_type: [unit, widget, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
        
      - name: Restore Flutter cache
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-
            
      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          name: generated-files
          path: lib/
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Run tests
        run: |
          echo "üß™ Running ${{ matrix.test_type }} tests on DigitalOcean..."
          
          if [ "${{ matrix.test_type }}" = "unit" ]; then
            flutter test --coverage --exclude-tags integration || echo "‚ö†Ô∏è Unit tests completed with warnings"
          elif [ "${{ matrix.test_type }}" = "widget" ]; then
            flutter test test/widgets/ --coverage || echo "‚ö†Ô∏è Widget tests completed with warnings"
          elif [ "${{ matrix.test_type }}" = "integration" ]; then
            flutter test integration_test/ --coverage || echo "‚ö†Ô∏è Integration tests completed with warnings"
          fi
        continue-on-error: true
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test_type }}
          path: coverage/
          retention-days: 30
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

  # Security scanning (DigitalOcean only)
  security-scan:
    needs: generate-code
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Restore Flutter cache
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-
            
      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          name: generated-files
          path: lib/
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Security audit
        run: |
          echo "üîç Running security audit on DigitalOcean..."
          flutter pub deps --style=tree
          
      - name: Check for vulnerabilities
        run: |
          echo "üîç Checking for known vulnerabilities..."
          # Add vulnerability scanning logic here
          echo "‚úÖ Security scan completed"
          
      - name: Analyze dependencies
        run: |
          echo "üìä Analyzing dependency tree..."
          flutter pub deps --style=tree > deps.txt
          echo "‚úÖ Dependency analysis completed"

  # Web build and deployment (DigitalOcean only)
  build-web:
    needs: [analyze, test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'
        
      - name: Restore Flutter cache
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-
            
      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          name: generated-files
          path: lib/
          
      - name: Install dependencies
        run: |
          flutter pub get
          npm install
          
      - name: Generate code
        run: |
          echo "üîß Running code generation for web build on DigitalOcean..."
          dart run build_runner build --delete-conflicting-outputs || echo "‚ö†Ô∏è Code generation completed with warnings"
        continue-on-error: true
        
      - name: Build web app
        run: |
          echo "üåê Building Flutter web app on DigitalOcean..."
          flutter build web --release --web-renderer html
          echo "‚úÖ Web build completed"
          
      - name: Verify web build
        run: |
          echo "üîç Verifying web build..."
          if [ -f "build/web/index.html" ]; then
            echo "‚úÖ Web build verification passed"
            ls -la build/web/
          else
            echo "‚ùå Build verification failed: index.html not found"
            exit 1
          fi
          
      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web/
          retention-days: 30

  # Android build (DigitalOcean only)
  build-android:
    needs: [analyze, test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Restore Flutter cache
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-
            
      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          name: generated-files
          path: lib/
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build APK
        run: |
          echo "ü§ñ Building Android APK on DigitalOcean..."
          flutter build apk --release --target-platform android-arm64
          flutter build apk --release --target-platform android-arm
          flutter build apk --release --target-platform android-x64
          echo "‚úÖ Android APK build completed"
          
      - name: Build App Bundle
        run: |
          echo "üì¶ Building Android App Bundle on DigitalOcean..."
          flutter build appbundle --release
          echo "‚úÖ Android App Bundle build completed"
          
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            build/app/outputs/flutter-apk/app-arm64-release.apk
            build/app/outputs/flutter-apk/app-arm-release.apk
            build/app/outputs/flutter-apk/app-x64-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  # iOS build (DigitalOcean only)
  build-ios:
    needs: [analyze, test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Restore Flutter cache
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-
            
      - name: Download generated files
        uses: actions/download-artifact@v4
        with:
          name: generated-files
          path: lib/
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build iOS
        run: |
          echo "üçé Building iOS app on DigitalOcean..."
          flutter build ios --release --no-codesign
          echo "‚úÖ iOS build completed"
          
      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios/iphoneos/Runner.app
          retention-days: 30

  # Deploy to Firebase Hosting (DigitalOcean only)
  deploy-firebase:
    needs: build-web
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && github.event.inputs.platform != 'android' && github.event.inputs.platform != 'ios'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web/
        
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [ -n "$FIREBASE_TOKEN" ]; then
            echo "üöÄ Deploying to Firebase Hosting from DigitalOcean..."
            for i in {1..3}; do
              if firebase deploy --only hosting --token "$FIREBASE_TOKEN"; then
                echo "‚úÖ Firebase deployment completed successfully"
                break
              else
                echo "‚ùå Firebase deployment attempt $i failed"
                if [ $i -eq 3 ]; then
                  echo "‚ùå All Firebase deployment attempts failed"
                  exit 1
                fi
                echo "üîÑ Retrying in 10 seconds..."
                sleep 10
              fi
            done
          else
            echo "‚ö†Ô∏è Firebase token not available - skipping deployment"
          fi

  # Deploy to DigitalOcean App Platform
  deploy-digitalocean:
    needs: build-web
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && github.event.inputs.platform != 'android' && github.event.inputs.platform != 'ios'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web/
          
      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Deploy to DigitalOcean App Platform
        run: |
          if [ -n "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" ] && [ -n "${{ secrets.DIGITALOCEAN_APP_ID }}" ]; then
            echo "üåä Deploying to DigitalOcean App Platform..."
            for i in {1..3}; do
              if doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }}; then
                echo "‚úÖ DigitalOcean deployment completed successfully"
                break
              else
                echo "‚ùå DigitalOcean deployment attempt $i failed"
                if [ $i -eq 3 ]; then
                  echo "‚ùå All DigitalOcean deployment attempts failed"
                  exit 1
                fi
                echo "üîÑ Retrying in 10 seconds..."
                sleep 10
              fi
            done
          else
            echo "‚ö†Ô∏è DigitalOcean credentials not available - skipping deployment"
          fi

  # Create release
  create-release:
    needs: [build-android, build-ios, build-web]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-builds
          path: android-builds/
          
      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web-build/
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            
            - üöÄ New features and improvements
            - üêõ Bug fixes and optimizations
            - üì± Mobile app updates
            - üåê Web app enhancements
            
            ## Downloads
            
            - Android APK: Available in release assets
            - Android App Bundle: Available in release assets
            - iOS Build: Available in release assets
            - Web Build: Available in release assets
          draft: false
          prerelease: false

  # Notifications
  notify:
    needs: [deploy-firebase, deploy-digitalocean, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ DigitalOcean CI/CD pipeline completed successfully"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå DigitalOcean CI/CD pipeline failed"
          
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            DigitalOcean CI/CD Pipeline Status: ${{ job.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback mechanism
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Rollback deployment
        run: |
          echo "üîÑ Initiating rollback..."
          
          # Rollback Firebase deployment
          if [ -n "${{ secrets.FIREBASE_TOKEN }}" ]; then
            echo "üîÑ Rolling back Firebase deployment..."
            firebase hosting:clone appoint:live appoint:rollback --token "${{ secrets.FIREBASE_TOKEN }}" || echo "‚ö†Ô∏è Firebase rollback failed"
          fi
          
          # Rollback DigitalOcean deployment
          if [ -n "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" ]; then
            echo "üîÑ Rolling back DigitalOcean deployment..."
            doctl apps rollback ${{ secrets.DIGITALOCEAN_APP_ID }} --token "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" || echo "‚ö†Ô∏è DigitalOcean rollback failed"
          fi
          
          echo "‚úÖ Rollback completed"
          
      - name: Notify rollback
        run: |
          echo "üîÑ Deployment rollback completed"
          echo "Please check the deployment status and investigate the failure"