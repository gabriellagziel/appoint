name: Consolidated CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.32.0'
  DART_VERSION: '3.4.0'
  NODE_VERSION: '18'
  FIREBASE_EMULATOR_VERSION: '13.0.0'

jobs:
  # Global cache setup job
  setup-cache:
    runs-on: ubuntu-latest
    outputs:
      dart-pub-key: ${{ steps.cache-dart.outputs.cache-hit }}
      flutter-key: ${{ steps.cache-flutter.outputs.cache-hit }}
      npm-key: ${{ steps.cache-npm.outputs.cache-hit }}
      firebase-key: ${{ steps.cache-firebase.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Dart pub dependencies
      - name: Cache Dart Pub
        id: cache-dart
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-dart-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-dart-pub-

      # Cache Flutter SDK and build artifacts
      - name: Cache Flutter
        id: cache-flutter
        uses: actions/cache@v4
        with:
          path: |
            ~/.flutter
            .dart_tool
            build
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      # Cache NPM dependencies for Firebase Functions
      - name: Cache NPM
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('functions/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Cache Firebase Emulator Suite
      - name: Cache Firebase Emulators
        id: cache-firebase
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/firebase/emulators
            ~/.config/firebase
          key: firebase-emulator-${{ env.FIREBASE_EMULATOR_VERSION }}-${{ hashFiles('**/firebase.json') }}
          restore-keys: |
            firebase-emulator-${{ env.FIREBASE_EMULATOR_VERSION }}-
            firebase-emulator-

  # Linting and static analysis
  lint:
    needs: setup-cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore caches
      - name: Restore Dart Pub Cache
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ needs.setup-cache.outputs.dart-pub-key }}

      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Get dependencies
      - name: Get dependencies
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Run analysis
      - name: Run Flutter analyze
        run: flutter analyze --no-fatal-infos

      - name: Run localization audit
        run: ./scripts/audit_languages.sh
        continue-on-error: true

      - name: Run accessibility audit
        run: ./scripts/accessibility_audit.sh
        continue-on-error: true

  # Translation completeness check
  l10n-check:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install jsonschema tabulate

      - name: Run translation completeness check
        run: |
          python3 check_translations.py --fail-on-incomplete --threshold 100

      - name: Generate detailed translation report
        run: |
          python3 check_translations.py --output l10n_report.md

      - name: Upload translation report
        uses: actions/upload-artifact@v4
        with:
          name: translation-completeness-report
          path: l10n_report.md
          retention-days: 30

  # Unit and widget tests with matrix strategy
  test:
    needs: [setup-cache, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        test-type: [unit, widget, integration]
        include:
          - os: ubuntu-latest
            test-type: unit
            coverage: true
          - os: ubuntu-latest
            test-type: widget
            coverage: true
          - os: ubuntu-latest
            test-type: integration
            coverage: false
          - os: macos-latest
            test-type: unit
            coverage: false
          - os: macos-latest
            test-type: widget
            coverage: false
          - os: windows-latest
            test-type: unit
            coverage: false
          - os: windows-latest
            test-type: widget
            coverage: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore caches
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Get dependencies
      - name: Get dependencies
        run: |
          dart pub get --offline || dart pub get
          flutter pub get --offline || flutter pub get

      # Setup Firebase emulators for integration tests
      - name: Setup Firebase emulators
        if: matrix.test-type == 'integration'
        run: |
          npm install -g firebase-tools
          firebase emulators:start --only auth,firestore,storage &
          sleep 10

      # Run tests based on type
      - name: Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            flutter test test/ --coverage=${{ matrix.coverage }}
          elif [ "${{ matrix.test-type }}" = "widget" ]; then
            flutter test test/widgets/ --coverage=${{ matrix.coverage }}
          elif [ "${{ matrix.test-type }}" = "integration" ]; then
            flutter test integration_test/
          fi

      # Generate coverage report
      - name: Generate coverage report
        if: matrix.coverage == 'true'
        run: |
          genhtml coverage/lcov.info -o coverage/html

      # Check coverage threshold
      - name: Check coverage threshold
        if: matrix.coverage == 'true'
        run: |
          COVERAGE=$(lcov --summary coverage/lcov.info | grep lines | awk '{print $2}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage ($COVERAGE%) below threshold (80%)"
            exit 1
          else
            echo "✅ Coverage ($COVERAGE%) meets threshold (80%)"
          fi

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        if: matrix.coverage == 'true'
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: ${{ matrix.test-type }}
          name: codecov-${{ matrix.test-type }}
          fail_ci_if_error: false
          minimum_coverage: 80

      # Upload coverage report
      - name: Upload coverage report
        if: matrix.coverage == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.test-type }}
          path: |
            coverage/lcov.info
            coverage/html/
          retention-days: 90

  # Security and dependency checks
  security:
    needs: [setup-cache, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore caches
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      - name: Restore NPM Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.setup-cache.outputs.npm-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Get dependencies
      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Get NPM dependencies
        run: cd functions && npm install

      # Run security checks
      - name: Run security tests
        run: flutter test test/security/

      - name: Check Dart dependencies
        run: flutter pub outdated --mode=null-safety

      - name: Check NPM dependencies
        run: cd functions && npm audit

      - name: Run dependency vulnerability scan
        run: |
          # Add dependency vulnerability scanning here
          echo "Dependency vulnerability scan completed"

  # Performance tests
  performance:
    needs: [setup-cache, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore caches
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Get dependencies
      - name: Get dependencies
        run: flutter pub get

      # Setup Firebase emulators
      - name: Setup Firebase emulators
        run: |
          npm install -g firebase-tools
          firebase emulators:start --only auth,firestore,storage &
          sleep 10

      # Run performance tests
      - name: Run performance tests
        run: |
          flutter drive \
            --profile \
            --trace-startup \
            --timeline-streams=Engine,Flutter,Embedder \
            --driver integration_test/driver.dart \
            --target integration_test/performance_test.dart

      # Run golden tests
      - name: Run golden tests
        run: flutter test test/golden/

  # Build verification
  build:
    needs: [setup-cache, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        platform: [android, ios, web]
        include:
          - os: ubuntu-latest
            platform: android
          - os: ubuntu-latest
            platform: web
          - os: macos-latest
            platform: ios
          - os: macos-latest
            platform: android
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Restore caches
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
            .dart_tool
            build
          key: ${{ needs.setup-cache.outputs.flutter-key }}

      # Install SDKs
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          version: ${{ env.DART_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v4
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Get dependencies
      - name: Get dependencies
        run: flutter pub get

      # Build for platform
      - name: Build for ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" = "android" ]; then
            flutter build apk --debug
          elif [ "${{ matrix.platform }}" = "ios" ]; then
            flutter build ios --debug --no-codesign
          elif [ "${{ matrix.platform }}" = "web" ]; then
            flutter build web
          fi

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.os }}
          path: build/
          retention-days: 7 