name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  label:
    env:
      GHE_ENTERPRISE: ${{ secrets.GHE_ENTERPRISE }}
      GHE_TOKEN:      ${{ secrets.GHE_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  coverage:
    runs-on: ubuntu-latest
    needs: label
    timeout-minutes: 15
    env:
      GHE_ENTERPRISE: ${{ secrets.GHE_ENTERPRISE }}
      GHE_TOKEN: ${{ secrets.GHE_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: stable
          cache: true
      - name: Ensure Flutter & Dart in PATH
        run: |
          echo "/usr/local/flutter/bin" >> $GITHUB_PATH
          echo "/usr/lib/dart/bin" >> $GITHUB_PATH
      - name: Configure Network Allowlist
        run: |
          scripts/update_network_allowlist.sh $GHE_ENTERPRISE $GHE_TOKEN
      - name: "Pre-flight: Verify Dart"
        run: |
          which dart
          version_line=$(dart --version 2>&1)
          echo "$version_line"
          sdk=$(echo "$version_line" | awk '{print $4}')
          required=3.4.0
          if [ "$(printf '%s\n%s\n' "$required" "$sdk" | sort -V | head -n1)" != "$required" ]; then
            echo "Dart SDK $sdk is below required $required" && exit 1
          fi
      # network checks removed for offline usage
      - run: flutter pub get
      - name: Check Dart formatting
        run: dart format --output=none --set-exit-if-changed .
      - name: Analyze code
        run: flutter analyze
      - run: dart run build_runner build --delete-conflicting-outputs
      - name: Generate localizations
        run: flutter gen-l10n
      - name: Check for undefined localization getters
        run: dart scripts/check_l10n_getters.dart
      - run: dart test --coverage
      - name: Calculate coverage
        id: cov
        run: |
          total=$(grep -o 'LF:[0-9]*' coverage/lcov.info | cut -d: -f2 | paste -sd+ - | bc)
          covered=$(grep -o 'LH:[0-9]*' coverage/lcov.info | cut -d: -f2 | paste -sd+ - | bc)
          pct=$(awk "BEGIN {print ($covered/$total)*100}")
          echo "pct=$pct" >> $GITHUB_OUTPUT
      - name: Comment coverage
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pct = Number('${{ steps.cov.outputs.pct }}').toFixed(2);
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Test coverage: **${pct}%**`
            });
            core.summary.addHeading('Coverage').addRaw(`${pct}%`).write();
      - name: Fail if coverage below 80%
        run: |
          pct=${{ steps.cov.outputs.pct }}
          if (( $(echo "$pct < 80" | bc -l) )); then
            echo "Coverage $pct% is below threshold" >&2
            exit 1
          fi
