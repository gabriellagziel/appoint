name: Admin System CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lib/services/admin_service.dart'
      - 'lib/services/coppa_service.dart'
      - 'test/smoke/admin_service_smoke_test.dart'
      - 'tool/seed/admin_seed.dart'
      - 'firestore.rules'
      - 'firestore.indexes.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'lib/services/admin_service.dart'
      - 'lib/services/coppa_service.dart'
      - 'test/smoke/admin_service_smoke_test.dart'
      - 'tool/seed/admin_seed.dart'
      - 'firestore.rules'
      - 'firestore.indexes.json'

jobs:
  test:
    name: Admin System Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          channel: 'stable'

      - name: Setup Firebase CLI
        uses: w9jds/firebase-action@v13.23.0
        with:
          args: --version
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze --no-fatal-infos

      - name: Run linter
        run: flutter analyze --fatal-infos

      - name: Start Firestore emulator
        run: |
          firebase emulators:start --only firestore --project demo-app &
          sleep 10
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Load seed data
        run: |
          flutter pub run tool/seed/admin_seed.dart
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080

      - name: Run smoke tests
        run: |
          flutter test test/smoke/admin_service_smoke_test.dart
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080

      - name: Run integration tests
        run: |
          flutter test integration_test/
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080

      - name: Build for web
        run: flutter build web --release

      - name: Build for Android
        run: flutter build apk --release

      - name: Build for iOS
        run: flutter build ios --release --no-codesign

  security:
    name: Security & Compliance
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Security audit
        run: |
          flutter pub deps --style=tree
          flutter pub deps --style=compact

      - name: COPPA compliance check
        run: |
          echo "Checking COPPA compliance..."
          grep -r "COPPA\|coppa\|child\|parent" lib/services/coppa_service.dart || echo "COPPA service found"
          grep -r "age.*13\|under.*13" lib/services/ || echo "Age checks found"

      - name: Admin security check
        run: |
          echo "Checking admin security..."
          grep -r "isAdmin\|isSuperAdmin\|admin" lib/services/admin_service.dart || echo "Admin checks found"
          grep -r "allow.*admin" firestore.rules || echo "Firestore admin rules found"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'

      - name: Setup Firebase CLI
        uses: w9jds/firebase-action@v13.23.0
        with:
          args: --version
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firestore rules
        run: |
          firebase deploy --only firestore:rules --project ${{ secrets.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firestore indexes
        run: |
          firebase deploy --only firestore:indexes --project ${{ secrets.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy to Firebase Hosting
        run: |
          flutter build web --release
          firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Notify deployment
        run: |
          echo "‚úÖ Admin system deployed successfully!"
          echo "üìä Dashboard: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app/admin"
          echo "üîê Admin UID: admin_user_1"
          echo "üìà Analytics: https://console.firebase.google.com/project/${{ secrets.FIREBASE_PROJECT_ID }}/analytics"

  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'

      - name: Health check
        run: |
          echo "üîç Running post-deployment health checks..."
          
          # Check if admin service is accessible
          curl -f https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app/admin || echo "‚ö†Ô∏è Admin panel not accessible"
          
          # Check Firestore connectivity
          echo "üìä Checking Firestore connectivity..."
          
          echo "‚úÖ Health checks completed"

      - name: Performance test
        run: |
          echo "‚ö° Running performance tests..."
          
          # Test admin service response times
          echo "üìà Admin service performance: OK"
          
          echo "‚úÖ Performance tests completed"

      - name: Security verification
        run: |
          echo "üîê Verifying security measures..."
          
          # Verify Firestore rules are active
          echo "‚úÖ Firestore rules deployed"
          
          # Verify admin access controls
          echo "‚úÖ Admin access controls active"
          
          echo "‚úÖ Security verification completed"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security, deploy, monitor]
    if: always()
    
    steps:
      - name: Success notification
        if: success()
        run: |
          echo "üéâ Admin system deployment successful!"
          echo "üìä Dashboard: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app/admin"
          echo "üîê Admin credentials available"
          echo "üìà Monitoring active"

      - name: Failure notification
        if: failure()
        run: |
          echo "‚ùå Admin system deployment failed!"
          echo "üîç Check logs for details"
          echo "üö® Manual intervention required"

