name: Update Flutter Image

on: workflow_dispatch
env:
  FLUTTER_VERSION: '3.32.5'

jobs:
  update-flutter-image:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Fetch latest Flutter version
        id: flutter_version
        run: |
          echo "🔍 Fetching latest Flutter version..."
          LATEST=$(curl -s https://storage.googleapis.com/flutter_infra_release/releases/releases_linux.json | jq -r '.current_release.stable')
          FLUTTER_VERSION=$(curl -s https://storage.googleapis.com/flutter_infra_release/releases/releases_linux.json | jq -r ".releases[] | select(.hash == \"$LATEST\") | .version")
          
          echo "📦 Latest Flutter version: $FLUTTER_VERSION"
          echo "📦 Current version: ${{ env.FLUTTER_VERSION }}"
          
          if [ "$FLUTTER_VERSION" = "${{ env.FLUTTER_VERSION }}" ] && [ "${{ github.event.inputs.force_update }}" != "true" ]; then
            echo "✅ Flutter version is up to date"
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "🔄 Flutter version needs update"
            echo "skip_update=false" >> $GITHUB_OUTPUT
            echo "new_version=$FLUTTER_VERSION" >> $GITHUB_OUTPUT
          fi
          
      - name: Build and push Docker image
        if: steps.flutter_version.outputs.skip_update == 'false'
        run: |
          echo "🔨 Building Docker image with Flutter ${{ steps.flutter_version.outputs.new_version }}..."
          
          # Build new Docker image
          docker build --build-arg FLUTTER_VERSION=${{ steps.flutter_version.outputs.new_version }} \
            -t appoint/flutter-ci:${{ steps.flutter_version.outputs.new_version }} \
            infrastructure/flutter_ci
          
          # Tag for DigitalOcean Container Registry
          echo "🏷️ Tagging images..."
          docker tag appoint/flutter-ci:${{ steps.flutter_version.outputs.new_version }} \
            registry.digitalocean.com/appoint/flutter-ci:${{ steps.flutter_version.outputs.new_version }}
          docker tag registry.digitalocean.com/appoint/flutter-ci:${{ steps.flutter_version.outputs.new_version }} \
            registry.digitalocean.com/appoint/flutter-ci:latest
          
          # Push to DigitalOcean Container Registry
          echo "📤 Pushing to DigitalOcean Container Registry..."
          docker push registry.digitalocean.com/appoint/flutter-ci:${{ steps.flutter_version.outputs.new_version }}
          docker push registry.digitalocean.com/appoint/flutter-ci:latest
          
          echo "✅ Flutter Docker image updated successfully!"
          echo "📋 New version: ${{ steps.flutter_version.outputs.new_version }}"
          
      - name: Skip update
        if: steps.flutter_version.outputs.skip_update == 'true'
        run: |
          echo "⏭️ Skipping update - Flutter version is already up to date"
          echo "📦 Current version: ${{ env.FLUTTER_VERSION }}"
          
      - name: Notify completion
        run: |
          if [ "${{ steps.flutter_version.outputs.skip_update }}" = "false" ]; then
            echo "✅ Flutter Docker image updated to version ${{ steps.flutter_version.outputs.new_version }}"
          else
            echo "ℹ️ Flutter Docker image is already up to date"
          fi
