name: Security and Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - secrets

env:
  FLUTTER_VERSION: '3.24.5'
  NODE_VERSION: '18'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          flutter pub get
          npm install
          
      - name: Scan Flutter dependencies
        run: |
          echo "üîç Scanning Flutter dependencies for vulnerabilities..."
          flutter pub deps --style=tree > deps.txt
          echo "‚úÖ Flutter dependency scan completed"
          
      - name: Scan npm dependencies
        run: |
          echo "üîç Scanning npm dependencies for vulnerabilities..."
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Some vulnerabilities found (continuing)"
          
      - name: Check for outdated packages
        run: |
          echo "üì¶ Checking for outdated packages..."
          flutter pub outdated || echo "‚ÑπÔ∏è Some packages may be outdated"
          
      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-report
          path: |
            deps.txt
            package-lock.json
          retention-days: 30

  # Code security analysis
  code-security:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Run Flutter analyze
        run: |
          echo "üîç Running Flutter analyze..."
          flutter analyze --fatal-infos
          echo "‚úÖ Flutter analyze completed"
          
      - name: Check for hardcoded secrets
        run: |
          echo "üîç Checking for hardcoded secrets..."
          grep -r -i "password\|secret\|key\|token" lib/ | grep -v "//" | grep -v "/*" || echo "‚úÖ No obvious hardcoded secrets found"
          
      - name: Check for debug prints
        run: |
          echo "üîç Checking for debug prints..."
          grep -r "print(" lib/ || echo "‚úÖ No debug prints found"
          
      - name: Check for TODO comments
        run: |
          echo "üîç Checking for TODO comments..."
          grep -r "TODO" lib/ || echo "‚úÖ No TODO comments found"

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.event.after }}
          
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Performance analysis
  performance-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Analyze code size
        run: |
          echo "üìä Analyzing code size..."
          find lib/ -name "*.dart" -exec wc -l {} + | tail -1
          echo "‚úÖ Code size analysis completed"
          
      - name: Check for unused imports
        run: |
          echo "üîç Checking for unused imports..."
          dart fix --dry-run || echo "‚ÑπÔ∏è Some unused imports may exist"
          
      - name: Performance test
        run: |
          echo "‚ö° Running performance tests..."
          flutter test integration_test/performance_test.dart || echo "‚ö†Ô∏è Performance tests not found"

  # Accessibility testing
  accessibility-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Run accessibility tests
        run: |
          echo "‚ôø Running accessibility tests..."
          flutter test test/a11y/ || echo "‚ö†Ô∏è Accessibility tests not found"
          
      - name: Check for semantic labels
        run: |
          echo "üîç Checking for semantic labels..."
          grep -r "semanticLabel" lib/ || echo "‚ÑπÔ∏è No semantic labels found"

  # Code coverage analysis
  coverage-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Run tests with coverage
        run: |
          echo "üìä Running tests with coverage..."
          flutter test --coverage
          
      - name: Generate coverage report
        run: |
          echo "üìà Generating coverage report..."
          genhtml coverage/lcov.info -o coverage/html
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
          
      - name: Check coverage threshold
        run: |
          echo "üéØ Checking coverage threshold..."
          COVERAGE=$(lcov --summary coverage/lcov.info | grep lines | awk '{print $2}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ùå Coverage ($COVERAGE%) below threshold (80%)"
            exit 1
          else
            echo "‚úÖ Coverage ($COVERAGE%) meets threshold (80%)"
          fi

  # Security report generation
  security-report:
    needs: [dependency-scan, code-security, secrets-scan, performance-analysis, accessibility-test, coverage-analysis]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Generate security report
        run: |
          echo "üìã Generating security report..."
          echo "# Security and Quality Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Summary" >> security-report.md
          echo "- ‚úÖ Dependency scanning completed" >> security-report.md
          echo "- ‚úÖ Code security analysis completed" >> security-report.md
          echo "- ‚úÖ Secrets scanning completed" >> security-report.md
          echo "- ‚úÖ Performance analysis completed" >> security-report.md
          echo "- ‚úÖ Accessibility testing completed" >> security-report.md
          echo "- ‚úÖ Coverage analysis completed" >> security-report.md
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "1. Review any vulnerabilities found in dependencies" >> security-report.md
          echo "2. Address any hardcoded secrets or debug prints" >> security-report.md
          echo "3. Improve test coverage if below 80%" >> security-report.md
          echo "4. Add semantic labels for better accessibility" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  # Notifications
  notify:
    needs: [security-report]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Security and QA checks completed successfully"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Security and QA checks failed"
          
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#security'
          text: |
            Security and QA Status: ${{ job.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}