name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      force_deploy:
        description: 'Force deployment even if checks fail'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.32.5'
  DART_VERSION: '3.5.4'
  NODE_VERSION: '18'

jobs:
  # Validate deployment prerequisites
  validate-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate environment variables
        run: |
          echo "🔍 Validating deployment prerequisites..."
          
          # Check required secrets
          if [ -z "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" ]; then
            echo "❌ DIGITALOCEAN_ACCESS_TOKEN not configured"
            exit 1
          fi
          
          if [ -z "${{ secrets.APP_ID }}" ]; then
            echo "❌ APP_ID not configured"
            exit 1
          fi
          
          if [ -z "${{ secrets.FIREBASE_TOKEN }}" ]; then
            echo "❌ FIREBASE_TOKEN not configured"
            exit 1
          fi
          
          echo "✅ All required environment variables are configured"
          
      - name: Check branch
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "❌ Production deployment must be from main branch"
            if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              exit 1
            else
              echo "⚠️ Force deploy enabled - proceeding despite branch check"
            fi
          else
            echo "✅ Deploying from main branch"
          fi

  # Build and deploy to production
  deploy-production:
    needs: validate-deployment
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: production
    container:
      image: registry.digitalocean.com/appoint/flutter-ci:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            /home/flutter/.pub-cache
            .dart_tool/
            build/
            .flutter-plugins
            .flutter-plugins-dependencies
          key: production-flutter-deps-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            production-flutter-deps-${{ env.FLUTTER_VERSION }}-
            flutter-deps-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies for production..."
          flutter pub get
          npm install
          
      - name: Generate code
        run: |
          echo "🔧 Running code generation..."
          dart run build_runner build --delete-conflicting-outputs
          
      - name: Run production tests
        run: |
          echo "🧪 Running production-ready tests..."
          flutter test --coverage || echo "⚠️ Tests completed with warnings"
          
      - name: Build for production
        env:
          ENVIRONMENT: production
          API_BASE_URL: https://api.app-oint.com
          FIREBASE_PROJECT_ID: app-oint-core
        run: |
          echo "🏗️ Building Flutter web app for production..."
          flutter build web --release \
            --web-renderer html \
            --dart-define=ENVIRONMENT=production \
            --dart-define=API_BASE_URL=https://api.app-oint.com \
            --dart-define=FIREBASE_PROJECT_ID=app-oint-core
          
          echo "✅ Production build completed"
          ls -la build/web/
          
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo "🔥 Deploying to Firebase Hosting..."
          
          # Deploy to production hosting
          firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project app-oint-core
          
          echo "✅ Firebase Hosting deployment completed"
          
      - name: Deploy to DigitalOcean App Platform
        run: |
          echo "🌊 Deploying to DigitalOcean App Platform..."
          
          # Create new deployment
          doctl apps create-deployment ${{ secrets.APP_ID }} --wait
          
          echo "✅ DigitalOcean App Platform deployment completed"
          
      - name: Update environment variables
        run: |
          echo "🔧 Updating production environment variables..."
          
          # Update app environment variables
          doctl apps update ${{ secrets.APP_ID }} \
            --set-env-vars \
            ENVIRONMENT=production \
            NODE_ENV=production \
            API_BASE_URL=https://api.app-oint.com \
            FIREBASE_PROJECT_ID=app-oint-core
          
          echo "✅ Environment variables updated"
          
      - name: Verify deployment
        run: |
          echo "🔍 Verifying production deployment..."
          
          # Wait for deployment to be ready
          sleep 60
          
          # Check if production domain is accessible
          if curl -f -s "https://api.app-oint.com" > /dev/null; then
            echo "✅ Production API is accessible"
          else
            echo "⚠️ Production API not yet accessible - may need more time"
          fi
          
          # Check Firebase hosting
          if curl -f -s "https://app-oint-core.web.app" > /dev/null; then
            echo "✅ Firebase hosting is accessible"
          else
            echo "⚠️ Firebase hosting not yet accessible - may need more time"
          fi
          
      - name: Deployment summary
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo ""
          echo "📊 Deployment Details:"
          echo "  Environment: production"
          echo "  Branch: ${{ github.ref }}"
          echo "  Commit: ${{ github.sha }}"
          echo "  Timestamp: $(date)"
          echo ""
          echo "🌐 Access URLs:"
          echo "  API: https://api.app-oint.com"
          echo "  Web App: https://app-oint-core.web.app"
          echo "  DigitalOcean App: App ID ${{ secrets.APP_ID }}"

  # Notification
  notify-deployment:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "✅ Production deployment completed successfully"
            echo "🌐 App-Oint is now live at https://api.app-oint.com"
          else
            echo "❌ Production deployment failed"
            echo "🔍 Please check the deployment logs for details"
            exit 1
          fi