name: Ops Cron

on:
  schedule:
    # Run every 5 minutes for heartbeat
    - cron: '*/5 * * * *'
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  heartbeat:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '*/5 * * * *'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Setup Firebase credentials
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > sa.json
        export GOOGLE_APPLICATION_CREDENTIALS=./sa.json
        
    - name: Heartbeat check
      run: |
        # Simple health check - verify Firebase connection
        npx ts-node -e "
          const { initializeApp, cert } = require('firebase-admin/app');
          const { getFirestore } = require('firebase-admin/firestore');
          
          initializeApp({
            credential: cert('./sa.json')
          });
          
          const db = getFirestore();
          
          // Try to read a document to verify connection
          db.collection('analytics').limit(1).get()
            .then(() => console.log('‚úÖ Heartbeat: Firebase connection healthy'))
            .catch(err => {
              console.error('‚ùå Heartbeat: Firebase connection failed', err);
              process.exit(1);
            });
        "
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ./sa.json

  nightly-telemetry:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 2 * * *'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Setup Firebase credentials
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > sa.json
        export GOOGLE_APPLICATION_CREDENTIALS=./sa.json
        
    - name: Run telemetry verification
      run: |
        npx ts-node tools/telemetry_verify.ts
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ./sa.json
        
    - name: Generate Day-3 report (if applicable)
      run: |
        # Check if feature was launched 3 days ago
        LAUNCH_DATE="${{ secrets.SHARE_GROUPS_LAUNCH_DATE }}"
        if [ -n "$LAUNCH_DATE" ]; then
          DAYS_SINCE_LAUNCH=$(( ( $(date +%s) - $(date -d "$LAUNCH_DATE" +%s) ) / 86400 ))
          if [ "$DAYS_SINCE_LAUNCH" -eq 3 ]; then
            echo "üéâ Generating Day-3 adoption report"
            npx ts-node tools/reports/share_groups_day3.ts
          else
            echo "Not Day-3 yet (days since launch: $DAYS_SINCE_LAUNCH)"
          fi
        else
          echo "No launch date set, skipping Day-3 report"
        fi
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ./sa.json

  cleanup-expired-tokens:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 2 * * *'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Setup Firebase credentials
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > sa.json
        export GOOGLE_APPLICATION_CREDENTIALS=./sa.json
        
    - name: Cleanup expired tokens
      run: |
        npx ts-node -e "
          const { initializeApp, cert } = require('firebase-admin/app');
          const { getFirestore, Timestamp } = require('firebase-admin/firestore');
          
          initializeApp({
            credential: cert('./sa.json')
          });
          
          const db = getFirestore();
          const now = new Date();
          
          // Clean up expired guest tokens
          db.collection('guest_tokens')
            .where('expiresAt', '<', Timestamp.fromDate(now))
            .get()
            .then(snapshot => {
              const batch = db.batch();
              let deletedCount = 0;
              
              snapshot.docs.forEach(doc => {
                batch.delete(doc.ref);
                deletedCount++;
              });
              
              return batch.commit().then(() => {
                console.log(\`‚úÖ Cleaned up \${deletedCount} expired guest tokens\`);
              });
            })
            .catch(err => {
              console.error('‚ùå Error cleaning up expired tokens:', err);
              process.exit(1);
            });
        "
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ./sa.json

  cleanup-rate-limits:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 2 * * *'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Setup Firebase credentials
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > sa.json
        export GOOGLE_APPLICATION_CREDENTIALS=./sa.json
        
    - name: Cleanup old rate limit records
      run: |
        npx ts-node -e "
          const { initializeApp, cert } = require('firebase-admin/app');
          const { getFirestore, Timestamp } = require('firebase-admin/firestore');
          
          initializeApp({
            credential: cert('./sa.json')
          });
          
          const db = getFirestore();
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 7); // Keep 7 days
          
          // Clean up old rate limit records
          db.collection('rate_limits')
            .where('timestamp', '<', Timestamp.fromDate(cutoffDate))
            .get()
            .then(snapshot => {
              const batch = db.batch();
              let deletedCount = 0;
              
              snapshot.docs.forEach(doc => {
                batch.delete(doc.ref);
                deletedCount++;
              });
              
              return batch.commit().then(() => {
                console.log(\`‚úÖ Cleaned up \${deletedCount} old rate limit records\`);
              });
            })
            .catch(err => {
              console.error('‚ùå Error cleaning up rate limits:', err);
              process.exit(1);
            });
        "
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ./sa.json

  anomaly-detection:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 2 * * *'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Setup Firebase credentials
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > sa.json
        export GOOGLE_APPLICATION_CREDENTIALS=./sa.json
        
    - name: Run anomaly detection
      run: |
        npx ts-node -e "
          const { initializeApp, cert } = require('firebase-admin/app');
          const { getFirestore, Timestamp } = require('firebase-admin/firestore');
          
          initializeApp({
            credential: cert('./sa.json')
          });
          
          const db = getFirestore();
          const now = new Date();
          const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
          
          // Check for anomalies in the last 24 hours
          db.collection('analytics')
            .where('timestamp', '>=', Timestamp.fromDate(yesterday))
            .get()
            .then(snapshot => {
              const events = snapshot.docs.map(doc => doc.data());
              
              // Calculate metrics
              const shareLinksCreated = events.filter(e => e.event === 'share_link_created').length;
              const rateLimitHits = events.filter(e => e.event === 'rate_limit_hit').length;
              const permissionDenied = events.filter(e => e.event === 'permission_denied').length;
              
              // Check for anomalies
              const anomalies = [];
              
              if (rateLimitHits > shareLinksCreated * 0.1) {
                anomalies.push('High rate limit hits (>10% of share link creations)');
              }
              
              if (permissionDenied > 0) {
                anomalies.push('Permission denied errors detected');
              }
              
              if (shareLinksCreated === 0) {
                anomalies.push('No share links created in 24 hours');
              }
              
              if (anomalies.length > 0) {
                console.log('üö® Anomalies detected:');
                anomalies.forEach(anomaly => console.log('- ' + anomaly));
                process.exit(1);
              } else {
                console.log('‚úÖ No anomalies detected');
              }
            })
            .catch(err => {
              console.error('‚ùå Error in anomaly detection:', err);
              process.exit(1);
            });
        "
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ./sa.json


