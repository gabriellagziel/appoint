name: CI Watchdog

on:
  workflow_run:
    workflows: ["DigitalOcean CI Pipeline"]
    types: [in_progress, completed]
  schedule:
    # Check every 5 minutes
    - cron: '*/5 * * * *'
  push:
    branches: [ main ]

jobs:
  # Monitor CI jobs for loops and hangs
  monitor-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Setup GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for stuck workflows
        id: check-stuck
        run: |
          echo "üîç Checking for stuck CI workflows..."
          
          # Get all running workflows
          RUNNING_WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.status == "in_progress") | {id: .id, name: .name, created_at: .created_at, updated_at: .updated_at}')
          
          if [ -n "$RUNNING_WORKFLOWS" ]; then
            echo "$RUNNING_WORKFLOWS" | jq -c '.' | while read -r workflow; do
              WORKFLOW_ID=$(echo "$workflow" | jq -r '.id')
              WORKFLOW_NAME=$(echo "$workflow" | jq -r '.name')
              CREATED_AT=$(echo "$workflow" | jq -r '.created_at')
              UPDATED_AT=$(echo "$workflow" | jq -r '.updated_at')
              
              # Calculate duration in minutes
              CREATED_EPOCH=$(date -d "$CREATED_AT" +%s)
              UPDATED_EPOCH=$(date -d "$UPDATED_AT" +%s)
              DURATION_MINUTES=$(( (UPDATED_EPOCH - CREATED_EPOCH) / 60 ))
              
              echo "üìä Workflow $WORKFLOW_ID ($WORKFLOW_NAME) running for $DURATION_MINUTES minutes"
              
              # Check if workflow has been running too long (>30 minutes)
              if [ $DURATION_MINUTES -gt 30 ]; then
                echo "‚ö†Ô∏è Workflow $WORKFLOW_ID has been running for $DURATION_MINUTES minutes (>30 min threshold)"
                echo "stuck_workflow_id=$WORKFLOW_ID" >> $GITHUB_OUTPUT
                echo "stuck_duration=$DURATION_MINUTES" >> $GITHUB_OUTPUT
              fi
            done
          else
            echo "‚úÖ No stuck workflows found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for repeated steps
        id: check-repeated
        run: |
          echo "üîç Checking for repeated CI steps..."
          
          # Get recent workflow runs
          RECENT_WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.created_at > "'$(date -d '1 hour ago' -Iseconds)'") | .id')
          
          echo "$RECENT_WORKFLOWS" | while read -r workflow_id; do
            if [ -n "$workflow_id" ]; then
              # Get jobs for this workflow
              JOBS=$(gh api repos/${{ github.repository }}/actions/runs/$workflow_id/jobs \
                --jq '.jobs[] | {name: .name, steps: [.steps[] | {name: .name, status: .conclusion, number: .number}]}')
              
              echo "$JOBS" | jq -c '.' | while read -r job; do
                JOB_NAME=$(echo "$job" | jq -r '.name')
                
                # Count repeated steps
                STEP_COUNTS=$(echo "$job" | jq -r '.steps[].name' | sort | uniq -c)
                
                echo "$STEP_COUNTS" | while read -r count step_name; do
                  if [ "$count" -gt 3 ]; then
                    echo "‚ö†Ô∏è Job '$JOB_NAME' has repeated step '$step_name' $count times (>3 threshold)"
                    echo "repeated_workflow_id=$workflow_id" >> $GITHUB_OUTPUT
                    echo "repeated_job_name=$JOB_NAME" >> $GITHUB_OUTPUT
                    echo "repeated_step_name=$step_name" >> $GITHUB_OUTPUT
                    echo "repeated_count=$count" >> $GITHUB_OUTPUT
                  fi
                done
              done
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Handle stuck workflows
        if: steps.check-stuck.outputs.stuck_workflow_id != ''
        run: |
          WORKFLOW_ID=${{ steps.check-stuck.outputs.stuck_workflow_id }}
          DURATION=${{ steps.check-stuck.outputs.stuck_duration }}
          
          echo "üö® Cancelling stuck workflow $WORKFLOW_ID (running for $DURATION minutes)"
          
          # Cancel the workflow
          gh api repos/${{ github.repository }}/actions/runs/$WORKFLOW_ID/cancel -X POST
          
          # Send notification
          echo "‚ùå Workflow $WORKFLOW_ID was cancelled due to timeout ($DURATION minutes)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Handle repeated steps
        if: steps.check-repeated.outputs.repeated_workflow_id != ''
        run: |
          WORKFLOW_ID=${{ steps.check-repeated.outputs.repeated_workflow_id }}
          JOB_NAME=${{ steps.check-repeated.outputs.repeated_job_name }}
          STEP_NAME=${{ steps.check-repeated.outputs.repeated_step_name }}
          COUNT=${{ steps.check-repeated.outputs.repeated_count }}
          
          echo "üö® Cancelling workflow with repeated steps"
          echo "Workflow: $WORKFLOW_ID"
          echo "Job: $JOB_NAME"
          echo "Step: $STEP_NAME (repeated $COUNT times)"
          
          # Cancel the workflow
          gh api repos/${{ github.repository }}/actions/runs/$WORKFLOW_ID/cancel -X POST
          
          # Send notification
          echo "‚ùå Workflow $WORKFLOW_ID was cancelled due to repeated steps"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Send notifications
        if: always() && (steps.check-stuck.outputs.stuck_workflow_id != '' || steps.check-repeated.outputs.repeated_workflow_id != '')
        run: |
          # Create notification message
          NOTIFICATION="üö® **CI Watchdog Alert**
          
          A CI workflow was cancelled due to infrastructure issues:
          
          "
          
          if [ "${{ steps.check-stuck.outputs.stuck_workflow_id }}" != "" ]; then
            NOTIFICATION="$NOTIFICATION
          ‚è±Ô∏è **Timeout**: Workflow ${{ steps.check-stuck.outputs.stuck_workflow_id }} was running for ${{ steps.check-stuck.outputs.stuck_duration }} minutes
          "
          fi
          
          if [ "${{ steps.check-repeated.outputs.repeated_workflow_id }}" != "" ]; then
            NOTIFICATION="$NOTIFICATION
          üîÑ **Repeated Steps**: Workflow ${{ steps.check-repeated.outputs.repeated_workflow_id }} had step '${{ steps.check-repeated.outputs.repeated_step_name }}' repeated ${{ steps.check-repeated.outputs.repeated_count }} times
          "
          fi
          
          NOTIFICATION="$NOTIFICATION
          
          The workflow has been automatically cancelled to prevent resource waste.
          
          ---
          *This is an automated message from the CI Watchdog.*"
          
          # Send to a designated channel or issue
          echo "$NOTIFICATION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}