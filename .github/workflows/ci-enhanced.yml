name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  FLUTTER_VERSION: '3.24.5'
  DART_VERSION: '3.4.3'

jobs:
  # Analysis and Quality Checks
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze project source
        run: flutter analyze --fatal-infos

      - name: Run custom analysis
        run: |
          dart analyze --fatal-infos
          dart fix --dry-run

      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: analysis-results
          path: |
            .dart_tool/
            analysis_options.yaml
          retention-days: 30

  # Test Coverage
  test-coverage:
    name: Test with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests with coverage
        run: |
          flutter test --coverage
          genhtml coverage/lcov.info -o coverage/html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 90

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage badge
        run: |
          COVERAGE=$(lcov --summary coverage/lcov.info | grep "lines" | cut -d ' ' -f 4 | cut -d '%' -f 1)
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage: $COVERAGE%"

  # Build and Package
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [analyze, test-coverage]
    strategy:
      matrix:
        platform: [android, ios, web, windows, macos, linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build for ${{ matrix.platform }}
        run: |
          case ${{ matrix.platform }} in
            android)
              flutter build apk --release
              ;;
            ios)
              flutter build ios --release --no-codesign
              ;;
            web)
              flutter build web --release
              ;;
            windows)
              flutter build windows --release
              ;;
            macos)
              flutter build macos --release
              ;;
            linux)
              flutter build linux --release
              ;;
          esac

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/web/
            build/windows/runner/Release/
            build/macos/Build/Products/Release/
            build/linux/x64/release/bundle/
          retention-days: 30

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [analyze, test-coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run integration tests
        run: |
          flutter drive --target=test_driver/app.dart
          flutter test integration_test/

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test_driver/
          retention-days: 30

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://your-app-domain.com'

      - name: Run dependency vulnerability scan
        run: |
          flutter pub deps --style=tree
          # Add your preferred security scanning tool here

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            zap-report.html
            security-report.json
          retention-days: 90

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-android

      - name: Run performance tests
        run: |
          # Add your performance testing scripts here
          echo "Running performance tests..."

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-reports/
          retention-days: 30

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*

      - name: Deploy to Firebase Hosting (Web)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.REDACTED_TOKEN }}'
          channelId: live
          projectId: your-project-staging

      - name: Deploy to TestFlight (iOS)
        run: |
          # Add iOS deployment steps
          echo "Deploying to TestFlight..."

      - name: Deploy to Play Console (Android)
        run: |
          # Add Android deployment steps
          echo "Deploying to Play Console..."

      - name: Notify deployment
        run: |
          echo "Staging deployment completed successfully"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*

      - name: Deploy to Firebase Hosting (Web)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.REDACTED_TOKEN }}'
          channelId: live
          projectId: your-project-production

      - name: Deploy to App Store (iOS)
        run: |
          # Add iOS App Store deployment steps
          echo "Deploying to App Store..."

      - name: Deploy to Play Store (Android)
        run: |
          # Add Android Play Store deployment steps
          echo "Deploying to Play Store..."

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from CI/CD pipeline
            
            ## Changes
            - Build number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref }}
            
            ## Artifacts
            - Android APK
            - iOS IPA
            - Web build
            - Desktop builds
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: appoint-android-v${{ github.run_number }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Notify production deployment
        run: |
          echo "Production deployment completed successfully"

  # Generate Badges
  generate-badges:
    name: Generate Badges
    runs-on: ubuntu-latest
    needs: [test-coverage, security-scan, performance-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate coverage badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          namedLogo: flutter
          label: coverage
          message: ${{ needs.test-coverage.outputs.coverage }}%
          namedLogoColor: 02569B
          color: 4CAF50
          logLevel: 1

      - name: Generate build status badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          namedLogo: github
          label: build
          message: passing
          namedLogoColor: 181717
          color: 4CAF50
          logLevel: 1

      - name: Generate security badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          namedLogo: shield
          label: security
          message: passed
          namedLogoColor: 4CAF50
          color: 4CAF50
          logLevel: 1

  # Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, generate-badges]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Discord
        run: |
          # Add Discord notification logic
          echo "Sending Discord notification..."

      - name: Update deployment status
        run: |
          echo "Updating deployment status in external systems..." 