rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // User metadata collection - PWA tracking data
    match /user_meta/{userId} {
      // Allow users to read and write their own PWA metadata
      allow read, write: if request.auth != null 
                         && request.auth.uid == userId
                         && isValidUserMeta();
      
      // Helper function to validate user_meta document structure
      function isValidUserMeta() {
        let data = request.resource.data;
        return data.keys().hasAll(['userId', 'userPwaPromptCount', 'hasInstalledPwa', 'createdAt', 'updatedAt'])
               && data.userId is string
               && data.userPwaPromptCount is number
               && data.hasInstalledPwa is bool
               && data.createdAt is timestamp
               && data.updatedAt is timestamp
               && data.userId == userId; // Ensure userId matches document ID
      }
    }
    
    // Alternative structure if using nested user documents
    // match /users/{userId}/meta/{docId} {
    //   allow read, write: if request.auth != null 
    //                      && request.auth.uid == userId;
    // }
    
    // Playtime-related collections with PWA integration
    match /playtime_games/{gameId} {
      // Public read access for games
      allow read: if true;
      // Only authenticated users can create/update (admins in real app)
      allow write: if request.auth != null;
    }
    
    match /playtime_sessions/{sessionId} {
      // Users can read sessions they're involved in
      allow read: if request.auth != null 
                     && (request.auth.uid == resource.data.creatorId
                         || request.auth.uid in resource.data.participantIds);
      
      // Users can create sessions
      allow create: if request.auth != null 
                       && request.auth.uid == request.resource.data.creatorId;
      
      // Only creators can update their sessions
      allow update: if request.auth != null 
                       && request.auth.uid == resource.data.creatorId;
      
      // Only creators can delete their sessions
      allow delete: if request.auth != null 
                       && request.auth.uid == resource.data.creatorId;
    }
    
    match /playtime_backgrounds/{backgroundId} {
      // Public read access for backgrounds
      allow read: if true;
      // Only authenticated users can upload (admins approve in real app)
      allow write: if request.auth != null;
    }
    
    // Meetings collection with PWA tracking integration
    match /meetings/{meetingId} {
      // Users can read meetings they're involved in
      allow read: if request.auth != null 
                     && (request.auth.uid == resource.data.organizerId
                         || request.auth.uid in resource.data.participantIds);
      
      // Users can create meetings
      allow create: if request.auth != null 
                       && request.auth.uid == request.resource.data.organizerId
                       && isValidMeeting();
      
      // Only organizers can update their meetings
      allow update: if request.auth != null 
                       && request.auth.uid == resource.data.organizerId
                       && isValidMeeting();
      
      // Only organizers can delete their meetings
      allow delete: if request.auth != null 
                       && request.auth.uid == resource.data.organizerId;
      
      function isValidMeeting() {
        let data = request.resource.data;
        return data.keys().hasAll(['id', 'organizerId', 'title', 'startTime', 'endTime', 'meetingType', 'createdAt'])
               && data.organizerId is string
               && data.title is string
               && data.startTime is timestamp
               && data.endTime is timestamp
               && data.meetingType in ['personal', 'event', 'playtime']
               && data.createdAt is timestamp;
      }
    }
    
    // Analytics events (if storing in Firestore instead of external service)
    match /analytics_events/{eventId} {
      // Users can only create analytics events, not read/update/delete
      allow create: if request.auth != null 
                       && request.resource.data.userId == request.auth.uid;
      
      // Admins can read analytics (add admin check in real app)
      allow read: if request.auth != null 
                     && isAdmin();
      
      function isAdmin() {
        // Implement admin check logic
        // For now, allow any authenticated user (change in production)
        return request.auth != null;
      }
    }
    
    // Family links and relationships
    match /family_links/{linkId} {
      allow read, write: if request.auth != null 
                            && (request.auth.uid == resource.data.parentId
                                || request.auth.uid == resource.data.childId);
    }
    
    // User profiles
    match /users/{userId} {
      allow read, write: if request.auth != null 
                            && request.auth.uid == userId;
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if request.auth != null 
                            && isAdmin();
    }
    
    // Default deny rule for all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Additional helper functions that can be used across rules
function isAuthenticated() {
  return request.auth != null;
}

function isOwner(userId) {
  return request.auth != null && request.auth.uid == userId;
}

function isValidTimestamp(timestamp) {
  return timestamp is timestamp 
         && timestamp <= request.time 
         && timestamp >= request.time - duration.value(1, 'h'); // Within last hour
}

function hasValidUserClaims() {
  return request.auth != null 
         && request.auth.token != null
         && 'email_verified' in request.auth.token
         && request.auth.token.email_verified == true;
}