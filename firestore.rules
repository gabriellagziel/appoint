rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(id) {
      return isSignedIn() && request.auth.uid == id;
    }
    // User profiles
    match /users/{userId} {
      allow read, create: if isOwner(userId);
      allow update: if isSignedIn() &&
        isOwner(userId) &&
        (!('role' in request.resource.data) ||
          request.resource.data.role == resource.data.role);
    }

    // Bookings
    match /bookings/{bookingId} {
      allow read: if isSignedIn() && (
        resource.data.userId == request.auth.uid ||
        resource.data.businessId == request.auth.uid ||
        resource.data.ambassadorId == request.auth.uid
      );
      allow create: if isSignedIn() &&
        request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.businessId ||
        request.auth.uid == resource.data.ambassadorId
      ) &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.businessId == resource.data.businessId &&
        request.resource.data.ambassadorId == resource.data.ambassadorId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Businesses
    match /businesses/{businessId} {
      allow read: if isSignedIn();
      allow write: if isOwner(businessId);
    }

    // Ambassadors
    match /ambassadors/{ambassadorId} {
      allow read: if isSignedIn();
      allow write: if isOwner(ambassadorId);
    }

    // Admin broadcasts
    match /admin_broadcasts/{broadcastId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Ambassador quotas
    match /ambassador_quotas/{quotaId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.ambassadorId ||
        request.auth.uid == resource.data.businessId
      );
      allow create: if isSignedIn() && (
        request.auth.uid == request.resource.data.ambassadorId ||
        request.auth.uid == request.resource.data.businessId
      );
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.ambassadorId ||
        request.auth.uid == resource.data.businessId
      ) &&
        request.resource.data.ambassadorId == resource.data.ambassadorId &&
        request.resource.data.businessId == resource.data.businessId;
    }

    // Playtime Games - Simple rules
    match /playtime_games/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Playtime Sessions - Simple rules
    match /playtime_sessions/{docId} {
      allow read, write: if isSignedIn() &&
        (request.auth.uid == resource.data.creatorId || isAdmin());
    }

    // Playtime Backgrounds - Simple rules
    match /playtime_backgrounds/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Family relationships
    match /families/{familyId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.parentId ||
        request.auth.uid in resource.data.children
      );
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.parentId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.parentId &&
        request.resource.data.parentId == resource.data.parentId;
    }

    // Family invitations
    match /family_invitations/{invitationId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.parentId ||
        request.auth.uid == resource.data.childId
      );
      allow create: if isSignedIn() && (
        request.auth.uid == request.resource.data.parentId ||
        request.auth.uid == request.resource.data.childId
      );
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.parentId ||
        request.auth.uid == resource.data.childId
      ) &&
        request.resource.data.parentId == resource.data.parentId &&
        request.resource.data.childId == resource.data.childId;
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId &&
        request.resource.data.userId == resource.data.userId;
    }

    // Content library
    match /content_items/{itemId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // Payments
    match /payments/{paymentId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId &&
        request.resource.data.userId == resource.data.userId;
    }

    // Admin panel data
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 