rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // User groups
    match /user_groups/{groupId} {
      // Read: members can read their groups
      allow read: if request.auth != null && 
        (resource.data.members[request.auth.uid] != null || 
         resource.data.ownerId == request.auth.uid);
      
      // Write: owner and admins can update group data
      allow update: if request.auth != null && 
        (resource.data.ownerId == request.auth.uid || 
         resource.data.roles[request.auth.uid].role in ['owner', 'admin']);
      
      // Create: authenticated users can create groups
      allow create: if request.auth != null && 
        request.auth.uid == resource.data.ownerId;
      
      // Delete: only owner can delete group
      allow delete: if request.auth != null && 
        resource.data.ownerId == request.auth.uid;

      // Group votes subcollection
      match /votes/{voteId} {
        // Read: group members can read votes
        allow read: if request.auth != null && 
          (get(/databases/$(database)/documents/user_groups/$(groupId)).data.members[request.auth.uid] != null ||
           get(/databases/$(database)/documents/user_groups/$(groupId)).data.ownerId == request.auth.uid);
        
        // Create: owner and admins can create votes
        allow create: if request.auth != null && 
          (get(/databases/$(database)/documents/user_groups/$(groupId)).data.ownerId == request.auth.uid ||
           get(/databases/$(database)/documents/user_groups/$(groupId)).data.roles[request.auth.uid].role in ['owner', 'admin']);
        
        // Update: group members can vote (one vote per user)
        allow update: if request.auth != null && 
          (get(/databases/$(database)/documents/user_groups/$(groupId)).data.members[request.auth.uid] != null ||
           get(/databases/$(database)/documents/user_groups/$(groupId)).data.ownerId == request.auth.uid) &&
          request.resource.data.ballots.diff(resource.data.ballots).affectedKeys().hasOnly([request.auth.uid]);
      }

      // Group audit subcollection
      match /audit/{eventId} {
        // Read: owner and admins can read audit log
        allow read: if request.auth != null && 
          (get(/databases/$(database)/documents/user_groups/$(groupId)).data.ownerId == request.auth.uid ||
           get(/databases/$(database)/documents/user_groups/$(groupId)).data.roles[request.auth.uid].role in ['owner', 'admin']);
        
        // Write: only through service (server-side)
        allow write: if false;
      }
    }

    // Group invites
    match /group_invites/{inviteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }

    // Meetings
    match /meetings/{meetingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }

    // Analytics (write-only for client)
    match /analytics_group_usage/{eventId} {
      allow create: if request.auth != null;
      allow read: if false; // Read only through server-side
    }

    // Saved groups
    match /users/{userId}/saved_groups/{groupId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
