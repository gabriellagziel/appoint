openapi: 3.0.3
info:
  title: App-Oint API
  description: API for App-Oint appointment booking system
  version: 1.0.0
  contact:
    name: App-Oint Support
    email: support@appoint.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.appoint.com/v1
    description: Production server
  - url: https://staging-api.appoint.com/v1
    description: Staging server
  - url: https://dev-api.appoint.com/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  /health/liveness:
    get:
      summary: Health check - liveness
      description: Check if the service is alive
      tags:
        - Health
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-26T00:00:00Z"

  /health/readiness:
    get:
      summary: Health check - readiness
      description: Check if the service is ready to handle requests
      tags:
        - Health
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"
                  checks:
                    type: object
                    properties:
                      database:
                        type: boolean
                        example: true
                      firebase:
                        type: boolean
                        example: true
                      redis:
                        type: boolean
                        example: true

  /metrics:
    get:
      summary: Prometheus metrics
      description: Get Prometheus format metrics
      tags:
        - Monitoring
      responses:
        '200':
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string

  /auth/login:
    post:
      summary: User authentication
      description: Authenticate user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "password123"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "REDACTED_TOKEN..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"

  /api/users/profile:
    get:
      summary: Get user profile
      description: Retrieve current user's profile information
      tags:
        - Users
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /api/businesses/search:
    get:
      summary: Search businesses
      description: Search for businesses by query
      tags:
        - Businesses
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
            example: "restaurant"
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'

  /api/businesses/{businessId}:
    get:
      summary: Get business details
      description: Retrieve detailed information about a business
      tags:
        - Businesses
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
            example: "business123"
      responses:
        '200':
          description: Business details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '404':
          description: Business not found

  /api/bookings:
    get:
      summary: Get user bookings
      description: Retrieve current user's bookings
      tags:
        - Bookings
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
    post:
      summary: Create booking
      description: Create a new booking
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - businessId
                - scheduledAt
                - serviceType
              properties:
                businessId:
                  type: string
                  example: "business123"
                scheduledAt:
                  type: string
                  format: date-time
                  example: "2025-01-27T10:00:00Z"
                serviceType:
                  type: string
                  example: "consultation"
                notes:
                  type: string
                  example: "First time visit"
                location:
                  type: string
                  example: "123 Main St"
                openCall:
                  type: boolean
                  example: false
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid booking data
        '409':
          description: Booking conflict

  /api/beta-feature:
    get:
      summary: Beta feature endpoint
      description: Access beta features (feature flag controlled)
      tags:
        - Beta Features
      responses:
        '200':
          description: Beta feature active
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "beta active"
        '403':
          description: Beta feature disabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "disabled"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "user123"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        role:
          type: string
          enum: [user, business, admin]
          example: "user"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"

    Business:
      type: object
      properties:
        id:
          type: string
          example: "business123"
        name:
          type: string
          example: "Sample Business"
        description:
          type: string
          example: "A sample business"
        address:
          type: string
          example: "123 Main St, City, State"
        phone:
          type: string
          example: "+1-555-123-4567"
        email:
          type: string
          format: email
          example: "contact@business.com"
        services:
          type: array
          items:
            type: string
          example: ["consultation", "treatment"]

    Booking:
      type: object
      properties:
        id:
          type: string
          example: "booking123"
        userId:
          type: string
          example: "user123"
        businessId:
          type: string
          example: "business123"
        scheduledAt:
          type: string
          format: date-time
          example: "2025-01-27T10:00:00Z"
        serviceType:
          type: string
          example: "consultation"
        status:
          type: string
          enum: [pending, confirmed, cancelled, completed]
          example: "confirmed"
        notes:
          type: string
          example: "First time visit"
        location:
          type: string
          example: "123 Main St"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-26T00:00:00Z" 