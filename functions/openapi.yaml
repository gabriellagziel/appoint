openapi: 3.0.3
info:
  title: App-Oint API
  description: |
    Professional appointment booking platform API providing comprehensive 
    functionality for appointment management, user authentication, business 
    operations, and administrative tasks.
    
    ## Authentication
    Most endpoints require JWT authentication. Include the token in the 
    Authorization header: `Bearer <token>`
    
    ## Rate Limiting
    API requests are limited to 100 requests per 15 minutes per IP address.
    
    ## Error Handling
    The API uses conventional HTTP response codes and returns JSON error objects.
  version: 1.0.0
  contact:
    name: App-Oint Support
    email: support@app-oint.com
    url: https://app-oint.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5001
    description: Development server
  - url: https://api.app-oint.com
    description: Production server
  - url: https://staging-api.app-oint.com
    description: Staging server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Appointments
    description: Appointment booking and management
  - name: Businesses
    description: Business profile and operations
  - name: Analytics
    description: Analytics and reporting
  - name: Admin
    description: Administrative operations
  - name: Health
    description: System health and monitoring

paths:
  # ================================
  # HEALTH & MONITORING
  # ================================
  /health:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Returns the health status of the API service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"
                  uptime:
                    type: number
                    example: 3600

  /metrics:
    get:
      tags: [Health]
      summary: Prometheus metrics endpoint
      description: Returns metrics in Prometheus format
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string

  # ================================
  # AUTHENTICATION
  # ================================
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, firstName, lastName]
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123!"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                role:
                  type: string
                  enum: [user, business, admin]
                  default: user
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh JWT token
      description: Get a new access token using refresh token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  expiresIn:
                    type: number

  /auth/logout:
    post:
      tags: [Authentication]
      summary: User logout
      description: Invalidate user session
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful

  # ================================
  # USER MANAGEMENT
  # ================================
  /users/profile:
    get:
      tags: [Users]
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [Users]
      summary: Update user profile
      description: Update the authenticated user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # ================================
  # APPOINTMENT MANAGEMENT
  # ================================
  /appointments:
    get:
      tags: [Appointments]
      summary: List appointments
      description: Retrieve appointments with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, cancelled, completed]
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Appointments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  appointments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Appointments]
      summary: Create appointment
      description: Book a new appointment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCreate'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'

  /appointments/{id}:
    get:
      tags: [Appointments]
      summary: Get appointment details
      description: Retrieve specific appointment information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Appointment details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Appointments]
      summary: Update appointment
      description: Update appointment details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentUpdate'
      responses:
        '200':
          description: Appointment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'

    delete:
      tags: [Appointments]
      summary: Cancel appointment
      description: Cancel/delete an appointment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Appointment cancelled successfully

  # ================================
  # BUSINESS MANAGEMENT
  # ================================
  /businesses:
    get:
      tags: [Businesses]
      summary: List businesses
      description: Retrieve list of registered businesses
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: location
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Businesses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  businesses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Business'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Businesses]
      summary: Create business profile
      description: Register a new business
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessCreate'
      responses:
        '201':
          description: Business created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'

  /businesses/{id}:
    get:
      tags: [Businesses]
      summary: Get business details
      description: Retrieve specific business information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Business details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'

  # ================================
  # ANALYTICS
  # ================================
  /analytics/dashboard:
    get:
      tags: [Analytics]
      summary: Get dashboard analytics
      description: Retrieve analytics data for dashboard
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: Analytics data retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'

  # ================================
  # ADMIN OPERATIONS
  # ================================
  /admin/users:
    get:
      tags: [Admin]
      summary: List all users (Admin only)
      description: Retrieve all users with admin privileges
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, business, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        preferences:
          type: object

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: number

    Appointment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        businessId:
          type: string
          format: uuid
        serviceId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
        duration:
          type: integer
          description: Duration in minutes
        status:
          type: string
          enum: [pending, confirmed, cancelled, completed]
        notes:
          type: string
        createdAt:
          type: string
          format: date-time

    AppointmentCreate:
      type: object
      required: [businessId, serviceId, dateTime]
      properties:
        businessId:
          type: string
          format: uuid
        serviceId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
        notes:
          type: string

    AppointmentUpdate:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
        notes:
          type: string
        status:
          type: string
          enum: [pending, confirmed, cancelled, completed]

    Business:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        category:
          type: string
        address:
          type: object
        phone:
          type: string
        email:
          type: string
          format: email
        website:
          type: string
        rating:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time

    BusinessCreate:
      type: object
      required: [name, category, address, phone, email]
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
        address:
          type: object
        phone:
          type: string
        email:
          type: string
          format: email
        website:
          type: string

    Analytics:
      type: object
      properties:
        totalAppointments:
          type: integer
        totalRevenue:
          type: number
        topServices:
          type: array
          items:
            type: object
        appointmentTrends:
          type: array
          items:
            type: object

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: array
              items:
                type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'