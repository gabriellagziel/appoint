const admin = require("firebase-admin"); const backfillReminders = async () => { const firestore = admin.firestore(); console.log("🔄 Starting assigneeId backfill..."); try { const remindersSnapshot = await firestore.collection("reminders").where("assigneeId", "==", null).get(); console.log(`📊 Found ${remindersSnapshot.size} reminders without assigneeId`); if (remindersSnapshot.size === 0) { console.log("✅ No reminders need updating"); return; } const batchSize = 500; let processedCount = 0; for (let i = 0; i < remindersSnapshot.size; i += batchSize) { const batch = firestore.batch(); const batchDocs = remindersSnapshot.docs.slice(i, i + batchSize); batchDocs.forEach((doc) => { const reminder = doc.data(); batch.update(doc.ref, { assigneeId: reminder.ownerId, visibility: reminder.visibility || "private", updatedAt: admin.firestore.FieldValue.serverTimestamp(), }); }); await batch.commit(); processedCount += batchDocs.length; console.log(`✅ Processed batch: ${batchDocs.length} reminders`); } console.log(`🎉 Successfully updated ${processedCount} reminders`); } catch (error) { console.error("❌ Error during backfill:", error); throw error; } }; const validateBackfill = async () => { const firestore = admin.firestore(); console.log("🔍 Validating backfill results..."); try { const remainingSnapshot = await firestore.collection("reminders").where("assigneeId", "==", null).get(); if (remainingSnapshot.size === 0) { console.log("✅ All reminders now have assigneeId"); } else { console.log(`⚠️ Found ${remainingSnapshot.size} reminders still without assigneeId`); } const totalSnapshot = await firestore.collection("reminders").get(); console.log(`📊 Total reminders in database: ${totalSnapshot.size}`); } catch (error) { console.error("❌ Error during validation:", error); throw error; } }; const main = async () => { console.log("🚀 Starting assigneeId backfill process..."); try { await backfillReminders(); await validateBackfill(); console.log("🎉 Backfill process completed successfully!"); } catch (error) { console.error("💥 Backfill process failed:", error); process.exit(1); } }; if (require.main === module) { main(); }

