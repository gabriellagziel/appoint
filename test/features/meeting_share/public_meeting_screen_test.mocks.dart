// Mocks generated by Mockito 5.4.6 from annotations
// in appoint/test/features/meeting_share/public_meeting_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: REDACTED_TOKEN
import 'dart:async' as _i4;

import 'package:appoint/services/analytics/meeting_share_analytics_service.dart'
    as _i6;
import 'package:appoint/services/security/rate_limit_service.dart' as _i2;
import 'package:appoint/services/sharing/guest_token_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: REDACTED_TOKEN
// ignore_for_file: implementation_imports
// ignore_for_file: REDACTED_TOKEN
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRateLimitStatus_0 extends _i1.SmartFake
    implements _i2.RateLimitStatus {
  _FakeRateLimitStatus_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GuestTokenService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGuestTokenService extends _i1.Mock implements _i3.GuestTokenService {
  MockGuestTokenService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> createGuestToken(
    String? meetingId, {
    String? groupId,
    Duration? expiry,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGuestToken,
          [meetingId],
          {
            #groupId: groupId,
            #expiry: expiry,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createGuestToken,
            [meetingId],
            {
              #groupId: groupId,
              #expiry: expiry,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<Map<String, dynamic>> validateGuestToken(
    String? token,
    String? meetingId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateGuestToken,
          [
            token,
            meetingId,
          ],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> revokeGuestToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #revokeGuestToken,
          [token],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cleanupExpiredTokens() => (super.noSuchMethod(
        Invocation.method(
          #cleanupExpiredTokens,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isTokenValid(
    String? token,
    String? meetingId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isTokenValid,
          [
            token,
            meetingId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<DateTime?> getTokenExpiry(String? token) => (super.noSuchMethod(
        Invocation.method(
          #getTokenExpiry,
          [token],
        ),
        returnValue: _i4.Future<DateTime?>.value(),
      ) as _i4.Future<DateTime?>);
}

/// A class which mocks [RateLimitService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRateLimitService extends _i1.Mock implements _i2.RateLimitService {
  MockRateLimitService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> allow(
    String? actionKey,
    String? subjectKey, {
    String? userId,
    String? ipAddress,
    String? userAgent,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #allow,
          [
            actionKey,
            subjectKey,
          ],
          {
            #userId: userId,
            #ipAddress: ipAddress,
            #userAgent: userAgent,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.RateLimitStatus> getStatus(
    String? actionKey,
    String? subjectKey, {
    String? userId,
    String? ipAddress,
    String? userAgent,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStatus,
          [
            actionKey,
            subjectKey,
          ],
          {
            #userId: userId,
            #ipAddress: ipAddress,
            #userAgent: userAgent,
          },
        ),
        returnValue:
            _i4.Future<_i2.RateLimitStatus>.value(_FakeRateLimitStatus_0(
          this,
          Invocation.method(
            #getStatus,
            [
              actionKey,
              subjectKey,
            ],
            {
              #userId: userId,
              #ipAddress: ipAddress,
              #userAgent: userAgent,
            },
          ),
        )),
      ) as _i4.Future<_i2.RateLimitStatus>);

  @override
  _i4.Future<void> cleanupOldRecords() => (super.noSuchMethod(
        Invocation.method(
          #cleanupOldRecords,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [MeetingShareAnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class REDACTED_TOKEN extends _i1.Mock
    implements _i6.MeetingShareAnalyticsService {
  REDACTED_TOKEN() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> trackShareLinkCreated({
    required String? meetingId,
    String? groupId,
    required String? source,
    required String? shareId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackShareLinkCreated,
          [],
          {
            #meetingId: meetingId,
            #groupId: groupId,
            #source: source,
            #shareId: shareId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> trackShareLinkClicked({
    required String? shareId,
    required String? meetingId,
    String? groupId,
    required String? source,
    String? userId,
    String? guestToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackShareLinkClicked,
          [],
          {
            #shareId: shareId,
            #meetingId: meetingId,
            #groupId: groupId,
            #source: source,
            #userId: userId,
            #guestToken: guestToken,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> trackGroupMemberJoinedFromShare({
    required String? meetingId,
    required String? groupId,
    required String? userId,
    String? source,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackGroupMemberJoinedFromShare,
          [],
          {
            #meetingId: meetingId,
            #groupId: groupId,
            #userId: userId,
            #source: source,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> trackRSVPSubmittedFromShare({
    required String? meetingId,
    required String? groupId,
    String? userId,
    String? guestToken,
    required String? status,
    String? source,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackRSVPSubmittedFromShare,
          [],
          {
            #meetingId: meetingId,
            #groupId: groupId,
            #userId: userId,
            #guestToken: guestToken,
            #status: status,
            #source: source,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> trackGuestTokenCreated({
    required String? meetingId,
    String? groupId,
    required String? token,
    Duration? expiry,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackGuestTokenCreated,
          [],
          {
            #meetingId: meetingId,
            #groupId: groupId,
            #token: token,
            #expiry: expiry,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> trackGuestTokenValidated({
    required String? meetingId,
    required String? token,
    required bool? isValid,
    String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackGuestTokenValidated,
          [],
          {
            #meetingId: meetingId,
            #token: token,
            #isValid: isValid,
            #reason: reason,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> trackRateLimitHit({
    required String? actionKey,
    required String? subjectId,
    required int? currentHits,
    required int? maxHits,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackRateLimitHit,
          [],
          {
            #actionKey: actionKey,
            #subjectId: subjectId,
            #currentHits: currentHits,
            #maxHits: maxHits,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> trackPublicMeetingPageViewed({
    required String? meetingId,
    String? groupId,
    String? shareId,
    String? source,
    String? userId,
    String? guestToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackPublicMeetingPageViewed,
          [],
          {
            #meetingId: meetingId,
            #groupId: groupId,
            #shareId: shareId,
            #source: source,
            #userId: userId,
            #guestToken: guestToken,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>> getMeetingShareAnalytics(
          String? meetingId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMeetingShareAnalytics,
          [meetingId],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> getGroupShareAnalytics(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupShareAnalytics,
          [groupId],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}
