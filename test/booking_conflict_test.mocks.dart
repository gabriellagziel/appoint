// Mocks generated by Mockito 5.4.4 from annotations
// in appoint/test/booking_conflict_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:appoint/features/booking/services/booking_service.dart' as _i2;
import 'package:appoint/models/booking.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BookingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingService extends _i1.Mock implements _i2.BookingService {
  MockBookingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createBooking(_i4.Booking? booking) => (super.noSuchMethod(
        Invocation.method(
          #createBooking,
          [booking],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Booking>> getBookings() => (super.noSuchMethod(
        Invocation.method(
          #getBookings,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Booking>>.empty(),
      ) as _i3.Stream<List<_i4.Booking>>);

  @override
  _i3.Future<void> submitBooking(_i4.Booking? booking) => (super.noSuchMethod(
        Invocation.method(
          #submitBooking,
          [booking],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Booking>> getBookingsForUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingsForUser,
          [userId],
        ),
        returnValue: _i3.Future<List<_i4.Booking>>.value(<_i4.Booking>[]),
      ) as _i3.Future<List<_i4.Booking>>);

  @override
  _i3.Future<List<_i4.Booking>> getBookingsByIds(List<String>? bookingIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingsByIds,
          [bookingIds],
        ),
        returnValue: _i3.Future<List<_i4.Booking>>.value(<_i4.Booking>[]),
      ) as _i3.Future<List<_i4.Booking>>);

  @override
  _i3.Future<void> cancelBooking(String? bookingId) => (super.noSuchMethod(
        Invocation.method(
          #cancelBooking,
          [bookingId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Booking>> getUserBookings(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserBookings,
          [userId],
        ),
        returnValue: _i3.Stream<List<_i4.Booking>>.empty(),
      ) as _i3.Stream<List<_i4.Booking>>);

  @override
  _i3.Stream<List<_i4.Booking>> getBusinessBookings(String? businessId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBusinessBookings,
          [businessId],
        ),
        returnValue: _i3.Stream<List<_i4.Booking>>.empty(),
      ) as _i3.Stream<List<_i4.Booking>>);

  @override
  _i3.Future<_i4.Booking?> getBookingById(String? bookingId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookingById,
          [bookingId],
        ),
        returnValue: _i3.Future<_i4.Booking?>.value(),
      ) as _i3.Future<_i4.Booking?>);

  @override
  _i3.Future<void> updateBooking(_i4.Booking? booking) => (super.noSuchMethod(
        Invocation.method(
          #updateBooking,
          [booking],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> getWeeklyBookingCount(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getWeeklyBookingCount,
          [userId],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
