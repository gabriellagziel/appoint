// Mocks generated by Mockito 5.4.4 from annotations
// in appoint/test/services/auth_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:appoint/models/app_user.dart' as _i6;
import 'package:appoint/models/user_profile.dart' as _i3;
import 'package:appoint/services/auth_service.dart' as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:flutter/material.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserCredential_0 extends _i1.SmartFake
    implements _i2.UserCredential {
  _FakeUserCredential_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserProfile_1 extends _i1.SmartFake implements _i3.UserProfile {
  _FakeUserProfile_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i4.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set token(_i2.IdTokenResult? _token) => super.noSuchMethod(
        Invocation.setter(
          #token,
          _token,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.User?> currentUser() => (super.noSuchMethod(
        Invocation.method(
          #currentUser,
          [],
        ),
        returnValue: _i5.Future<_i2.User?>.value(),
      ) as _i5.Future<_i2.User?>);

  @override
  _i5.Stream<_i6.AppUser?> authStateChanges() => (super.noSuchMethod(
        Invocation.method(
          #authStateChanges,
          [],
        ),
        returnValue: _i5.Stream<_i6.AppUser?>.empty(),
      ) as _i5.Stream<_i6.AppUser?>);

  @override
  _i5.Future<void> signIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            email,
            password,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.UserCredential> signInWithGooglePopup() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGooglePopup,
          [],
        ),
        returnValue: _i5.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #signInWithGooglePopup,
            [],
          ),
        )),
      ) as _i5.Future<_i2.UserCredential>);

  @override
  _i5.Future<String?> handleSocialAccountConflict(
    _i7.BuildContext? context,
    _i2.FirebaseAuthException? error,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleSocialAccountConflict,
          [
            context,
            error,
          ],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<_i2.UserCredential?> signInWithGooglePopupWithConflictHandling(
          _i7.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithGooglePopupWithConflictHandling,
          [context],
        ),
        returnValue: _i5.Future<_i2.UserCredential?>.value(),
      ) as _i5.Future<_i2.UserCredential?>);

  @override
  bool isSocialAccountConflict(_i2.FirebaseAuthException? e) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSocialAccountConflict,
          [e],
        ),
        returnValue: false,
      ) as bool);

  @override
  String? getConflictingEmail(_i2.FirebaseAuthException? e) =>
      (super.noSuchMethod(Invocation.method(
        #getConflictingEmail,
        [e],
      )) as String?);

  @override
  _i2.AuthCredential? getConflictingCredential(_i2.FirebaseAuthException? e) =>
      (super.noSuchMethod(Invocation.method(
        #getConflictingCredential,
        [e],
      )) as _i2.AuthCredential?);

  @override
  _i5.Future<_i3.UserProfile> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.UserProfile>.value(_FakeUserProfile_1(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.UserProfile>);

  @override
  _i5.Future<_i3.UserProfile> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
    String? displayName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
            #displayName: displayName,
          },
        ),
        returnValue: _i5.Future<_i3.UserProfile>.value(_FakeUserProfile_1(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
              #displayName: displayName,
            },
          ),
        )),
      ) as _i5.Future<_i3.UserProfile>);

  @override
  _i5.Future<void> resetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [email],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.UserProfile?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i5.Future<_i3.UserProfile?>.value(),
      ) as _i5.Future<_i3.UserProfile?>);

  @override
  _i5.Future<void> updateUserProfile(_i3.UserProfile? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [profile],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteUser() => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool isValidEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #isValidEmail,
          [email],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isValidPassword(String? password) => (super.noSuchMethod(
        Invocation.method(
          #isValidPassword,
          [password],
        ),
        returnValue: false,
      ) as bool);
}
