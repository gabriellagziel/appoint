version: '3.8'

services:
  # ==============================================================================
  # REVERSE PROXY / LOAD BALANCER
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: app-oint-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - functions
      - dashboard
      - marketing
      - admin
      - business
    networks:
      - app-oint-network
    restart: unless-stopped

  # ==============================================================================
  # BACKEND SERVICES
  # ==============================================================================
  
  # Functions/API Service (Node.js)
  functions:
    build:
      context: ./functions
      dockerfile: Dockerfile
    container_name: app-oint-functions
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=5001
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./functions:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================================================
  # FRONTEND SERVICES
  # ==============================================================================
  
  # Dashboard Service (Next.js)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: app-oint-dashboard
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - API_BASE_URL=http://functions:5001
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5001}
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./dashboard:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - functions
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Marketing Website (Next.js)
  marketing:
    build:
      context: ./marketing
      dockerfile: Dockerfile
    container_name: app-oint-marketing
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=8080
      - API_BASE_URL=http://functions:5001
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5001}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-http://localhost:8080}
      - NEXT_PUBLIC_GA_ID=${NEXT_PUBLIC_GA_ID}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
    volumes:
      - ./marketing:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - functions
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel (Static/Nginx)
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: app-oint-admin
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - API_BASE_URL=http://functions:5001
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5001}
      - ADMIN_SECRET_KEY=${ADMIN_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./admin:/app
      - /app/node_modules
      - /app/out
    depends_on:
      - functions
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Business Portal (Static/Nginx)
  business:
    build:
      context: ./business
      dockerfile: Dockerfile
    container_name: app-oint-business
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - API_BASE_URL=http://functions:5001
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5001}
      - BUSINESS_SECRET_KEY=${BUSINESS_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
    volumes:
      - ./business:/app
      - /app/node_modules
      - /app/out
    depends_on:
      - functions
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================================================
  # DATABASE SERVICES
  # ==============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: app-oint-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-app_oint}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: app-oint-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==============================================================================
  # MONITORING & OBSERVABILITY
  # ==============================================================================
  
  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: app-oint-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerting-rules.yml:/etc/prometheus/alerting-rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--alertmanager.url=http://alertmanager:9093'
    depends_on:
      - alertmanager
    networks:
      - app-oint-network
    restart: unless-stopped

  # Alertmanager (Alert Routing and Notifications)
  alertmanager:
    image: prom/alertmanager:latest
    container_name: app-oint-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_ROUTING_KEY=${PAGERDUTY_ROUTING_KEY}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_SMARTHOST=${SMTP_SMARTHOST:-smtp.gmail.com:587}
      - ALERT_EMAIL_FROM=${ALERT_EMAIL_FROM:-alerts@app-oint.com}
      - CRITICAL_EMAIL_LIST=${CRITICAL_EMAIL_LIST:-devops@app-oint.com}
      - ONCALL_EMAIL_LIST=${ONCALL_EMAIL_LIST:-oncall@app-oint.com}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - app-oint-network
    restart: unless-stopped

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: app-oint-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - app-oint-network
    restart: unless-stopped

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: app-oint-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - app-oint-network
    restart: unless-stopped

# ==============================================================================
# DEVELOPMENT OVERRIDES
# ==============================================================================

  # Development versions with hot reloading
  functions-dev:
    extends: functions
    profiles: ["dev"]
    environment:
      - NODE_ENV=development
      - ENABLE_DEBUG_LOGS=true
      - ENABLE_SWAGGER_UI=true
    volumes:
      - ./functions:/app
      - /app/node_modules
    command: npm run dev

  dashboard-dev:
    extends: dashboard
    profiles: ["dev"]
    environment:
      - NODE_ENV=development
      - ENABLE_DEVTOOLS=true
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    command: npm run dev

  marketing-dev:
    extends: marketing
    profiles: ["dev"]
    environment:
      - NODE_ENV=development
      - ENABLE_DEVTOOLS=true
    volumes:
      - ./marketing:/app
      - /app/node_modules
    command: npm run dev

# ==============================================================================
# NETWORKS & VOLUMES
# ==============================================================================

networks:
  app-oint-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local