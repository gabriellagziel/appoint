version: '3.8'

services:
  # ==============================================================================
  # CORE SERVICES
  # ==============================================================================
  
  # Functions/API Service (Node.js)
  functions:
    build:
      context: ./functions
      dockerfile: Dockerfile
    container_name: app-oint-functions
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=8080
      - HOSTNAME=0.0.0.0
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/app_oint}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID:-app-oint-core}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./functions:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Service (Next.js)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: app-oint-dashboard
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - API_BASE_URL=http://functions:8080
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/app_oint}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-nextauth-secret-here}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID:-app-oint-core}
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ./dashboard:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - functions
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================================================
  # DATABASE SERVICES
  # ==============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: app-oint-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-app_oint}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: app-oint-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# ==============================================================================
# DEVELOPMENT PROFILES
# ==============================================================================

  # Development version of functions with hot reloading
  functions-dev:
    extends: functions
    profiles: ["dev"]
    environment:
      - NODE_ENV=development
      - ENABLE_DEBUG_LOGS=true
      - ENABLE_SWAGGER_UI=true
    volumes:
      - ./functions:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]

  # Development version of dashboard with hot reloading
  dashboard-dev:
    extends: dashboard
    profiles: ["dev"]
    environment:
      - NODE_ENV=development
      - ENABLE_DEVTOOLS=true
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]

# ==============================================================================
# MONITORING SERVICES
# ==============================================================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: app-oint-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - functions
      - dashboard

  # Grafana - Visualization Dashboard  
  grafana:
    image: grafana/grafana:10.2.2
    container_name: app-oint-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_DOMAIN=localhost
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - REDACTED_TOKEN=/etc/grafana/provisioning/dashboards/app-oint-dashboard.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docs/grafana_dashboard.json:/etc/grafana/provisioning/dashboards/app-oint-dashboard.json:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus

  # Business Service (Static/Nginx) - Port 8081
  business:
    build:
      context: ./business
      dockerfile: Dockerfile
    container_name: app-oint-business
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NGINX_PORT=8081
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health.html"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Service (Static/Nginx) - Port 8082
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: app-oint-admin
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NGINX_PORT=8082
    networks:
      - app-oint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health.html"]
      interval: 30s
      timeout: 10s
      retries: 3

# ==============================================================================
# NETWORKS & VOLUMES
# ==============================================================================

networks:
  app-oint-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local